[
  {
    "objectID": "labs/decision-making/index.html",
    "href": "labs/decision-making/index.html",
    "title": "Developers as Decision-Makers",
    "section": "",
    "text": "© Philip Claude Caplan, Andrea Vaccari, and Phil Chodrow, 2022"
  },
  {
    "objectID": "labs/prelims/index.html",
    "href": "labs/prelims/index.html",
    "title": "Designing Simple Programs",
    "section": "",
    "text": "© Philip Claude Caplan, Andrea Vaccari, and Phil Chodrow, 2022"
  },
  {
    "objectID": "labs/functions/index.html",
    "href": "labs/functions/index.html",
    "title": "Functions",
    "section": "",
    "text": "© Philip Claude Caplan, Andrea Vaccari, and Phil Chodrow, 2022"
  },
  {
    "objectID": "assignments.html",
    "href": "assignments.html",
    "title": "Index of Assignments",
    "section": "",
    "text": "Title\n\n\nsummary\n\n\n\n\n\n\nDesigning Simple Programs\n\n\n\n\n\n\nFunctions\n\n\nWe work with functions!\n\n\n\n\nDevelopers as Decision-Makers\n\n\nSome stuff we do.\n\n\n\n\n\n\nNo matching items\n© Philip Claude Caplan, Andrea Vaccari, and Phil Chodrow, 2022"
  },
  {
    "objectID": "assignments.html#guided-discovery",
    "href": "assignments.html#guided-discovery",
    "title": "Index of Assignments",
    "section": "Guided Discovery",
    "text": "Guided Discovery\n\n\n\n\n\n\nTitle\n\n\nsummary\n\n\nfile\n\n\n\n\n\n\nStrings\n\n\n\n\nAssignment file\n\n\n\n\nGuided Discovery: Practice With Functions\n\n\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "assignments.html#homework-exercises",
    "href": "assignments.html#homework-exercises",
    "title": "Index of Assignments",
    "section": "Homework Exercises",
    "text": "Homework Exercises"
  },
  {
    "objectID": "acknowledgements.html",
    "href": "acknowledgements.html",
    "title": "Acknowledgements",
    "section": "",
    "text": "© Philip Claude Caplan, Andrea Vaccari, and Phil Chodrow, 2022"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome!",
    "section": "",
    "text": "CSCI 0145, “Introduction to Computing,” is an introductory course in computer science at Middlebury College. It is one of several ways in which you might begin a computer science major at Midd. It’s also a great way for you to develop your computational skills to support other majors.\nThe primary aim of CSCI 0145 is to help you build strong foundations in computational thinking and programming skills. We will cover a fair amount of the Python programming language. That said, our primary focus will be on reasoning, program design, and implementation principles rather than the details of Python programming.\n© Philip Claude Caplan, Andrea Vaccari, and Phil Chodrow, 2022"
  },
  {
    "objectID": "index.html#instructor",
    "href": "index.html#instructor",
    "title": "Welcome!",
    "section": "Instructor",
    "text": "Instructor\n\nHello! I’m Dr. Phil Chodrow, and I’ll be your instructor for this course. My pronouns are he/him/his.\nMy research focuses on network science, the study of connected systems in society and nature. I draw on methods from applied mathematics, machine learning, statistics, and physics. I also work on data science projects to promote equity and sustainability.\nI love ethical data science, effective teaching, Star Trek: Deep Space 9, cool math, cooking, tea, traditional martial arts, and Studio Ghibli movies."
  },
  {
    "objectID": "collaboration.html",
    "href": "collaboration.html",
    "title": "Collaboration And Academic Honesty",
    "section": "",
    "text": "This is a page of general principles and guidelines that apply in courses I (Phil Chodrow) teach at Middlebury College. It is lightly adapted from the handout “Collaborating on Mathematics” by the Harvey Mudd Department of Mathematics, which I discovered in a Tweet by Francis Su.\nIn any case in which the guidelines and principles on this page conflict with the policies of a specific course, the policies of the specific course should be followed. For example, if the course syllabus says that collaboration is not permitted on homeworks, then collaboration is not permitted on homeworks, regardless of anything written here.\n© Philip Claude Caplan, Andrea Vaccari, and Phil Chodrow, 2022"
  },
  {
    "objectID": "collaboration.html#why-collaborate",
    "href": "collaboration.html#why-collaborate",
    "title": "Collaboration And Academic Honesty",
    "section": "Why Collaborate?",
    "text": "Why Collaborate?\nMost scientists and engineers don’t work on their own; they work with colleagues and students while doing and publishing research. Increasingly, open problems in science and engineering require multiple skill sets and areas of expertise. Because of this, the need to collaborate will only increase in the future. This is why several of CS@Midd’s learning goals are explicitly focused on communication and collaboration. We want our students to have strong professional and communication skills, to be able to function well as part of a team, and to be able to work and communicate with diverse groups of people."
  },
  {
    "objectID": "collaboration.html#collaborating-on-homework-and-other-individually-assessed-assignments",
    "href": "collaboration.html#collaborating-on-homework-and-other-individually-assessed-assignments",
    "title": "Collaboration And Academic Honesty",
    "section": "Collaborating on Homework and Other Individually-Assessed Assignments",
    "text": "Collaborating on Homework and Other Individually-Assessed Assignments\n\n(COLLABORATION IS A LIFE SKILL) Understand that working with others and asking for assistance are not signs of weakness or deficiency; rather, they are essential life skills important for making progress in any discipline, including computer science. Our department wants you to develop these skills. If you’re too shy to come to my office hours or to join a group of people working on their homework, ask a friend to come with you.\n(COLLABORATIONS BENEFIT FROM DIVERSITY) Open yourself up to working with people whom you don’t know (yet). You might find someone you work really well with and who doesn’t think exactly like you do. A wide range of experiecnes and backgrounds is beneficial in problem solving, although it may be helpful to find folks who can work on assignments during the same time of day and at roughly the same pace. If you’re having trouble finding people to work with, I can help!\n(COLLABORATIONS ARE INCLUSIVE) Believe that everyone has something meaningful to contribute (you included), and that you have something to learn from each person. This can be a difficult state of mind to achieve, but critical for healthy, effective collaboration. Here are some practical consequences:\n\nIn any group setting, listen carefully for everyone’s contributions. Don’t dismiss or ignore what someone says, and don’t move on until you’ve considered it carefully. If what is said doesn’t make sense to you, that doesn’t necessarily mean it’s incorrect–the person might just have a way of approaching the problem that is different and not yet clear to you. Furthermore, even ideas that ultimately turn out to be incomplete or incorrect are often still useful building blocks towards a successful approach.\nFind ways to verbally validate the ideas of others. For example: “One really neat feature of Zenith’s approach to part (b) is that it also works with a small modification for part (c).”\nIf someone in the group hasn’t spoken for a while, ask for their ideas or opinions. Conversely, if you find yourself talking a lot, take a step back and allow someone else to contribute to the discussion.\n\n(COLLABORATIONS REQUIRE PREPARATION) Don’t seek help from others on a probem before you’ve had time to think about it yourself, try at least one approach, and formulate the obstacle as clearly as you can. But at the same time, if you find yourself frustrated with a problem and you’re not making progress, don’t wait too long before you look for help from your classmates, your tutors, or me.\n(COLLABORATIONS GENERATE DEEPER UNDERSTANDING) Don’t be satisfied with only producing the correct final result; use your collaboration to push each other to understand:\n\nWhy does this approach work?\nWhat alternative approaches would also have worked?\nWhat are some of the merits and drawbacks of these different approaches?\n\n(COLLABORATIONS ARE EMPOWERING) Good collaborations empower people towards further growth.\n\nWhen you’re working on a problem with others and you find a path before everyone else, avoid ruining the experience of discovery for others. Conversely, if you haven’t figured out something yet and want to enjoy the discovery for yourself, don’t let someone else ruin your joy.\nIf someone asks you for help, don’t just tell them the answer or start showing them a solution method. Listen carefully to their question. Ask for more information if they aren’t being specific enough. If they say “I don’t know where to start,” ask them to tell you about their understanding of what the question is asking and which parts of it seem most puzzling. Ask guiding questions to help them discover ideas for themselves. In these situations, you have the opportunity to learn how to help others learn – this is an invaluable life skill.\n\n(COLLABORATIONS ACKNOWLEDGE CONTRIBUTORS) Whenever you’ve received help on a homework assignment from a classmate, a friend, a tutor, or me, acknowledge the support and briefly describe how it helped you in your assignment.\n\nThe reason I ask you to acknowledge tutors and myself is actually different from the reason I ask you to acknowledge classmates and friends. For classmates and friends, it’s about cultivating transparency and integrity. The primary reason I want you to acknowledge tutors and myself is that the exercise of explicitly remembering and reflecting on your learning journey is part of metacognition, a valuable set of practices that will help you succeed in this class, in college, and in your long-term career."
  },
  {
    "objectID": "collaboration.html#collaborating-on-group-projects",
    "href": "collaboration.html#collaborating-on-group-projects",
    "title": "Collaboration And Academic Honesty",
    "section": "Collaborating on Group Projects",
    "text": "Collaborating on Group Projects\n\n(COLLABORATIONS SET GOOD EXPECTATIONS) Establish clear expectations and ways of communicating with each other to avoid misunderstandings. When, where, and how often will you meet? How can you reach each other in case of an emergency?\n(COLLABORATION IS NOT DIVISION OF LABOR) Collaboration is not the same as splitting up a problem into pieces and then slapping the completed pieces together.\n\nIdentify the parts of the problem that need to be completed together and the parts that can be completed individually.\nWork toward a final product that everyone is happy with and that represents the contributions of everyone on the group.\nDon’t just divide up the work based on who might have the most experience or skill with each part of the problem. Let those who want to develop their skills also have a chance to work on pieces that are unfamiliar to them\n\n(COLLABORATIONS ARE EQUITABLE) Aim for each person to contribute a fair and equitable amount of effort and/or time to the group’s deliverables.\n(COLLABORATIONS RESOLVE CONFLICT QUICKLY) Resolve any misunderstands between the team members quickly. Don’t let those misunderstandings fester into distrust, resentment, or anger. Don’t be afraid to ask your professor for help in resolving interpersonal conflict in your team. While this can feel uncomfortable, often these kinds of situations are important opportunities for everyone to learn more about how to coexist as collaborative, whole humans."
  },
  {
    "objectID": "collaboration.html#collaboration-is-a-skill",
    "href": "collaboration.html#collaboration-is-a-skill",
    "title": "Collaboration And Academic Honesty",
    "section": "Collaboration is a Skill",
    "text": "Collaboration is a Skill\nYou might imagine that you already know whether you need to collaborate and how to do it. And indeed, there’s a lot you know already! But collaboration is a skill, and like other skills it rewards practice and growth. Effective collaboration involves perspective-taking, empathy, respect, and clear communication. We hope that you will find that the benefits of collaboration far outweigh its challenges."
  },
  {
    "objectID": "collaboration.html#collaboration-and-the-middlebury-honor-code",
    "href": "collaboration.html#collaboration-and-the-middlebury-honor-code",
    "title": "Collaboration And Academic Honesty",
    "section": "Collaboration and the Middlebury Honor Code",
    "text": "Collaboration and the Middlebury Honor Code\nThe Middlebury Honor Code’s preamble states that:\n\nThe students of Middlebury College believe that individual undergraduates must assume responsibility for their own integrity on all assigned academic work…The Middlebury student body, then, declares its commitment to an honor system that fosters moral growth and to a code that will not tolerate academic dishonesty in the College community.\n\nIn any assignment in which you receive a grade individually (homeworks, exams), the purpose of the grade is to measure your learning and achievement. When you turn in such an assignment, you implicitly represent that work as work that you are able to complete yourself under the stated conditions (which may include getting help or working with others). If you cannot complete some work under the stated collaboration conditions, it is dishonest to turn in that work.\nWhen working individually, it is your responsibility to uphold the Code’s standards of integrity and academic honesty. When working in a group, it is additionally your responsibility to ensure that your group as a whole upholds these standards.\nIf you have a question about whether some form of collaboration is permitted, just ask!\n\nWhat Happens if I Observe an Honor Violation?\nAn important part of my teaching philosophy is: “no cop shit.” From this blog post by Jeffrey Moro\nWe all fail to uphold our highest moral aspirations at times. If you show lack of integrity or academic honesty, that doesn’t mean you’re a bad person. It means that you’re under pressure and chose the course of action that looked like the most workable one to you at the time.\nThat said, if you show lack of integrity or academic honesty, that’s an indicator that you have an opportunity for some very important growth.\nIt is part of my job to help you achieve that growth. I will take this job very seriously.\nConcretely, if I observe an honor violation, the first thing that is likely to happen is something resembling the episode described in this Twitter thread by Dr. Spencer Bagley. What happens next depends on how the first thing goes. It will be awkward and uncomfortable for both of us. You don’t want this."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "© Philip Claude Caplan, Andrea Vaccari, and Phil Chodrow, 2022"
  },
  {
    "objectID": "notes/12-iteration.html",
    "href": "notes/12-iteration.html",
    "title": "Iteration",
    "section": "",
    "text": "© Philip Claude Caplan, Andrea Vaccari, and Phil Chodrow, 2022"
  },
  {
    "objectID": "notes/01-expressions-and-variables.html",
    "href": "notes/01-expressions-and-variables.html",
    "title": "Expressions and Variables",
    "section": "",
    "text": "© Philip Claude Caplan, Andrea Vaccari, and Phil Chodrow, 2022"
  },
  {
    "objectID": "notes/00-welcome.html",
    "href": "notes/00-welcome.html",
    "title": "Welcome to CSCI 0145!",
    "section": "",
    "text": "Computational Thinking: you will express algorithms for solving daily problems in terms of pseudocode.\nPositionality and Collaboration: you will reflect on how your personal identities and experiences inform your coding practice.\nPython Programming: you will run simple Python commands and programs.\n\n\n\nBroadly speaking,\n\nComputer science is the scientific study of automated computation and its applications.\n\nYou are already great at solving problems that require computations. Here’s one:\n\nZenith has 12 apples. She gives 3 apples to Manuel and buys 6 apples from Jiao. How many apples does Zenith now have?\n\nZenith clearly has \\(12 - 3 + 6 = 15\\) apples now. I don’t know about you, but I’m really bad at arithmetic, so there’s a good chance I’ll make a mistake doing this simple calculation. Even worse, what if we change the numbers? What if on Monday Zenith starts with 17 apples, and on Tuesday she starts with 13 apples? This is where the computer comes in. It will allow us to abstract the apple calculation for the different scenarios we might expect. The term abstraction means that we will try to “compartmentalize” the different calculations, i.e. we will break up our bigger calculation into smaller pieces.\n\n\n\nBut how can we get the computer to do these calculations? The first thing we need to do is come up with a solution approach to our problem. This will be the “idea” we have in our heads of how we will solve the problem. For example, we can calculate how many apples Zenith has by taking her starting apples, subtracting those she gives to Manuel, and then adding the ones she bought from Jiao. Notice how we can describe the calculation of the remaining number of apples without actually specifying any of the numbers. As a result, this solution will always work. Unlike humans, computers don’t make mistakes. They do exactly what you tell them to do. If you give the computer all the apple values, no matter what they are, and tell the computer to do the arithmetic, it will give you the right answer.\nWe haven’t introduced any Python programming yet, but perhaps you can already understand this simple program:\n\n# define inputs: a user could change these to any numbers\nAPPLES_START  = 5\nAPPLES_GIVEN  = 3\nAPPLES_BOUGHT = 5\n\n# this line describes the solution approach\nAPPLES_FINAL = APPLES_START - APPLES_GIVEN + APPLES_BOUGHT\n\n# show the output\nAPPLES_FINAL\n\n7\n\n\nThis was our first example of an algorithm.\n\nAn algorithm is a description of a procedure for solving a problem.\n\nWell-designed algorithms have the following key characteristics:\n\nCorrectness: the algorithm correctly (and demonstrably) gives a correct solution to the stated problem.\nHalting: the algorithm terminates with the solution after a finite number of steps—we don’t have to wait forever for the answer!\nLack of ambiguity: each step of the algorithm is so clearly described that a mindless machine could follow it.\nGenerality: the algorithm solves a range of problems, not just one or two specific ones.\n\n\n\nLet’s say the problem is: you’re hungry. How do you solve this problem? The short answer is: eat some food! This is a good idea, but it’s not yet an algorithm because it doesn’t have the characteristics we described above:\n\nCorrectness: this approach won’t always give a correct solution to the problem, because it only tells you to eat some food. If you don’t eat enough food you’ll still be hungry.\nHalting: this approach will only terminate with the solution if you are in fact able to find some food.\nLack of ambiguity: this approach isn’t specific enough for a machine to follow. What does “go” mean? Which food should be sought out?\nGenerality: this approach is quite general as a solution to the hunger problem, so we can check that one off.\n\nHow could we make this procedure into a better algorithm? Here’s one way:\n\nStand up.\nWalk to the cafeteria.\nGrab a bowl.\nPour in some Cheerios.\nPour some almond milk into the bowl.\nEat Cheerios from bowl until no longer hungry.\n\nThis is closer to being a good algorithm.  Let’s check our criteria again:In fact, there’s not really a clear line between what is and isn’t an algorithm, or a good algorithm — it’s a matter of degree.\n\nCorrectness: the new approach specifies to continue eating until you are no longer hungry. This is an improvement, although the algorithm still isn’t guaranteed to fully resolve your hunger. What if you’re hungry for more than one bowl? What happens if there aren’t any Cheerios in the cafeteria?\nHalting: the approach now terminates with a result (not necessarily one that fully resolves your hunger) after a finite number of steps, since the bowl contains a finite number of cheerios.\nLack of ambiguity: we still have some problems here. For example, the approach never actually says to get a spoon…\nGenerality: this approach is now less general. It only really works for college students who are hungry for Cheerios. [This is a common pattern in the design of algorithms: improvements on some criteria come at the cost of other criteria.]\n© Philip Claude Caplan, Andrea Vaccari, and Phil Chodrow, 2022"
  },
  {
    "objectID": "notes/00-welcome.html#bugs",
    "href": "notes/00-welcome.html#bugs",
    "title": "Welcome to CSCI 0145!",
    "section": "Bugs",
    "text": "Bugs\nBecause our procedure above isn’t fully unambiguous, it’s not ready for us to give to a mindless computer or robot. What would happen if we did? Remember, computers do exactly what we tell them to. In step 4, did we say where to pour the Cheerios? Nope. They would probably end up on the floor. We also didn’t say anything about how to eat the cereal in step 6! Maybe the computer uses a fork to eat things by default. The end result is that you would have a bowl full of almond milk with cereal on the floor, while trying to eat the cereal with a fork. This kind of undesired result from an algorithm is called a bug.The term bug originates from an actual moth that Grace Hopper found while she worked on the Harvard Mark II (an early kind of calculator). Read more about this here."
  },
  {
    "objectID": "notes/00-welcome.html#generalization",
    "href": "notes/00-welcome.html#generalization",
    "title": "Welcome to CSCI 0145!",
    "section": "Generalization",
    "text": "Generalization\nNow, what if you felt like Cheerios today, but tomorrow you wanted Raisin Bran instead? There’s no reason to re-write all these steps, since the only thing that changes is the type of cereal we want to eat. This is where abstraction comes to the rescue again. The right way to go about solving this problem would be to “abstract away” some of the details so that we can re-use parts of the algorithm. This will make more sense when we start developing code."
  },
  {
    "objectID": "notes/preface.html",
    "href": "notes/preface.html",
    "title": "Lecture Notes",
    "section": "",
    "text": "© Philip Claude Caplan, Andrea Vaccari, and Phil Chodrow, 2022"
  },
  {
    "objectID": "notes/11-conditionals.html",
    "href": "notes/11-conditionals.html",
    "title": "Conditionals",
    "section": "",
    "text": "© Philip Claude Caplan, Andrea Vaccari, and Phil Chodrow, 2022"
  },
  {
    "objectID": "notes/10-functions.html",
    "href": "notes/10-functions.html",
    "title": "Functions",
    "section": "",
    "text": "© Philip Claude Caplan, Andrea Vaccari, and Phil Chodrow, 2022"
  },
  {
    "objectID": "notes/10-functions.html#second-part",
    "href": "notes/10-functions.html#second-part",
    "title": "Functions",
    "section": "More Functions",
    "text": "More Functions"
  },
  {
    "objectID": "guided-discovery/strings-1/index.html",
    "href": "guided-discovery/strings-1/index.html",
    "title": "Strings",
    "section": "",
    "text": "© Philip Claude Caplan, Andrea Vaccari, and Phil Chodrow, 2022"
  },
  {
    "objectID": "guided-discovery/functions/index.html",
    "href": "guided-discovery/functions/index.html",
    "title": "Guided Discovery: Practice With Functions",
    "section": "",
    "text": "© Philip Claude Caplan, Andrea Vaccari, and Phil Chodrow, 2022"
  },
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "CSCI 0145, Introduction to Computing, is an introductory course in computer science at Middlebury College. It is one of several ways in which you might begin a computer science major at Midd. It’s also a great way for you to develop your computational skills to support other majors.\nThe primary aim of CSCI 0145 is to help you build strong foundations in computational thinking and programming skills. We will cover a fair amount of the Python programming language. That said, our primary focus will be on reasoning, program design, and implementation principles rather than the details of Python programming.\n© Philip Claude Caplan, Andrea Vaccari, and Phil Chodrow, 2022"
  },
  {
    "objectID": "syllabus.html#books",
    "href": "syllabus.html#books",
    "title": "Syllabus",
    "section": "Books",
    "text": "Books\nThere are no required books to purchase in this course. Required and optional readings will come from free online sources, especially including:\n\nHow to Think like a Computer Scientist: an interactive book with many embedded activities.\nFoundation of Python programming: another interactive book with a fair amount of overlapping with “How to think like a Computer Scientist”\nThinkPython: please note that despite providing a good introduction to Python, the language and examples used in this book are not the most inclusive. Most of the examples are drawn from the comedy routines of the British surrealist comedians “Monty Python (Links to an external site.)” which, to someone who has never seen any of their material, will not be particularly helpful.\nCourse notes: together with other members of the CS Department, we are putting together our own interactive notes for the intro courses. This is still a work in progress and they are constantly edited so, go back often to check since there might be new goodies appearing over time.\nPython 3.7 Documentation: This is the official documentation for the Python programming language. Following along with the Tutorial is an excellent way to develop your skills, and the Language Reference is also extremely helpful. Note that this is the documentation for Python 3.7, rather than the most current Python 3.10. This is because Python 3.7 is the version that comes bundled with Thonny, and is therefore the version we will use in this class. The differences between 3.7 and 3.10 are minimal and unlikely to ever come up in CSCI 0145."
  },
  {
    "objectID": "syllabus.html#python-thonny",
    "href": "syllabus.html#python-thonny",
    "title": "Syllabus",
    "section": "Python: Thonny",
    "text": "Python: Thonny\nWe’ll write most of our Python code in Thonny. Thonny is a simple integrated development environment (IDE): a place to write, run, and troubleshoot code. It can be installed on Windows, Mac and Linux. Please see the Thonny website for installation instructions. Thonny comes bundled with Python version 3.7, which is the version that we will use throughout CSCI 0145.\n\n\n\n\n\nA screenshot of the Thonny Python IDE, showing some sample code and some pop-out windows for debugging.\n\n\nThe Thonny IDE.\nYou may already be familiar with a different IDE, and may prefer it to Thonny. While you are welcome to use your IDE of choice on your own time, we expect you to use Thonny during class time and when working with partners on labs. This is to ensure that we don’t have to spend precious group time with one partner getting used to another partner’s IDE."
  },
  {
    "objectID": "syllabus.html#collaborative-python-replit",
    "href": "syllabus.html#collaborative-python-replit",
    "title": "Syllabus",
    "section": "Collaborative Python: replit",
    "text": "Collaborative Python: replit\nWe’ll have regular group assignments that will ask you to collaborate on coding projects. In general, the expectation is that only one person will be coding at a time. However, in order to ensure that you don’t need to do things like swap laptops when it comes time to change roles, we’ll complete these assignments in an online collaborative coding environment called replit. You’ll sign up for our CSCI 0145 team on replit using an invite link posted in Canvas. You’ll then be able to work with partners on guided discovery and lab assignments in the replit interface. It’s a bit more complex than Thonny, but has the same core functionality.\n\n\n\n\n\nA screenshot of replit, showing a file browser, source code, and output in a terminal.\n\n\nThe replit online IDE."
  },
  {
    "objectID": "syllabus.html#help-forum-campuswire",
    "href": "syllabus.html#help-forum-campuswire",
    "title": "Syllabus",
    "section": "Help Forum: Campuswire",
    "text": "Help Forum: Campuswire\nWe will use Campuswire as a question-and-answer forum related to course content. You’ll join Campuswire by clicking on a link provided on Canvas. A few basic policies:\n\n\n\n\n\nA screenshot of Campuswire, showing a menu sidebar, a list of recent posts, and a question/answer exchange involving a mathematical formula.\n\n\nCampuswire, our Q&A forum.\n\nQuestions should usually be posted publicly. I reserve the right to make private questions public.\nPlease ask questions using your name (i.e. not anonymously). Use of names helps us establish a healthy and respectful learning community.\nBefore posting your question, please follow the steps outlined in Asking for Help.\nConceptual questions are always fine.\nCode that is directly related to lab or homework solutions should never be posted on Campuswire.\nIf you are having trouble with code in a lab or homework assignment, you should create a minimal reproducible example of your issue. A minimal reproducible example is sometimes called a reprex.\n\nCampuswire isn’t here just for me to help you – it’s also for you to help each other. Both excellent, thoughtful questions and"
  },
  {
    "objectID": "syllabus.html#assignments-gradescope-and-canvas",
    "href": "syllabus.html#assignments-gradescope-and-canvas",
    "title": "Syllabus",
    "section": "Assignments: Gradescope and Canvas",
    "text": "Assignments: Gradescope and Canvas\nGradescope is one of the places in which you’ll submit graded assignments for this course. Most assignments, including homework assignments, labs, and guided discovery activities will be submitted to Gradescope. Homework assignments and labs will be assessed for correctness, while guided discovery activities will simply be assessed for completion.\n\n\n\n\n\nA screenshot of Gradescope, showing a coding submission and a grading rubric with some items marked.\n\n\nGradescope, our primary tool for submitting graded work.\nWe’ll also submit some assignments through Canvas. Canvas is also where we’ll keep things like lecture recordings, grades, and other non-public content."
  },
  {
    "objectID": "syllabus.html#general-advice",
    "href": "syllabus.html#general-advice",
    "title": "Syllabus",
    "section": "General Advice",
    "text": "General Advice\nI am always happy to talk with you about your future plans, including internships, research opportunities, and graduate school applications. Because I am a creature of the academy, I am less knowledgeable about industry jobs, although you are welcome to ask about those too. You can drop in during Student Hours or email me to make an appointment."
  },
  {
    "objectID": "syllabus.html#letters-of-recommendation",
    "href": "syllabus.html#letters-of-recommendation",
    "title": "Syllabus",
    "section": "Letters of Recommendation",
    "text": "Letters of Recommendation\nWriting letters of recommendation for students is a fundamental part of my job and something that I am usually very happy to do. Here’s how to ask me for a letter."
  },
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "Course Schedule",
    "section": "",
    "text": "Introduction \n            \n        \n            \n                    M\n                    \n                    Sep. 12 \n             Welcome to CSCI 0145!\n   \n        \n        \n             \n                We discuss the structure of the class and briefly introduce computational thinking. \n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Computational Thinking  \n            \n            \n                    Reading\n                            Course syllabus  \n                            What is this course about?  \n                            Algorithms and bugs  \n            \n            \n            \n            \n            \n        \n        \n            \n                    W\n                    \n                    Sep. 14 \n             Expressions and Variables\n   \n        \n        \n             \n                We discuss expressions -- the simplest recipes for computations -- and variables, which allow us to store the results of computations for later use. \n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Computational Thinking  \n                            Python Programming  \n            \n            \n                    Reading\n                            Expressions  \n                            Variables  \n            \n            \n            \n            \n            \n        \n        \n            \n                    T\n                    \n                    Sep. 15 \n             Guided Discovery: Introduction to Strings\n   \n        \n        \n             \n                We learn some ways to manipulate text, save the results, and show them to the user. We'll come back to advanced text manipulation much later in the course. \n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Python Programming  \n                            Applications  \n            \n            \n                    Activity\n                            GD1  \n            \n            \n            \n            \n            \n        \n        \n            \n                    F\n                    \n                    Sep. 16 \n             Lab: Designing Simple Programs\n   \n        \n        \n             \n                We write simple programs to enable user interaction using our new programming skills. \n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Python Programming  \n                            Design and Collaboration  \n            \n            \n                    Activity\n                             L1   \n            \n            \n            \n            \n            \n        \n            \n             Fundamentals of Procedural Programming \n            \n        \n            \n                    M\n                    \n                    Sep. 19 \n             Functions\n   \n        \n        \n             \n                Functions are reusable computational recipes. We discuss the basic ingredients of a function and work through some simple examples. \n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Computational Thinking  \n                            Python Programming  \n            \n            \n                    Reading\n                            Functions  \n                             More reading   \n            \n            \n            \n            \n                    Due\n                            Lab 1 \n            \n        \n        \n            \n                    W\n                    \n                    Sep. 21 \n             More on Functions\n   \n        \n        \n             \n                We discuss some important considerations for writing functions and using functions that other people have written. Our two main topics are documentation and modules. \n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Computational Thinking  \n                            Python Programming  \n            \n            \n                    Reading\n                            More on Functions  \n            \n            \n            \n            \n            \n        \n        \n            \n                    T\n                    \n                    Sep. 22 \n             Guided Discovery: Practice With Functions\n   \n        \n        \n             \n                TBD\n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Computational Thinking  \n                            Python Programming  \n            \n            \n                    Activity\n                            (link)  \n            \n            \n            \n            \n            \n        \n        \n            \n                    F\n                    \n                    Sep. 23 \n             Lab: Writing (About) Functions \n   \n        \n        \n             \n                TBD\n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Python Programming  \n                            Design and Collaboration  \n            \n            \n                    Activity\n                            (link)  \n            \n            \n            \n            \n            \n        \n        \n\nNo matching items\n\n  © Philip Claude Caplan, Andrea Vaccari, and Phil Chodrow, 2022"
  }
]