[
  {
    "objectID": "labs/decision-making/index.html",
    "href": "labs/decision-making/index.html",
    "title": "Developers as Decision-Makers",
    "section": "",
    "text": "© Philip Claude Caplan, Andrea Vaccari, and Phil Chodrow, 2022"
  },
  {
    "objectID": "labs/prelims/index.html",
    "href": "labs/prelims/index.html",
    "title": "Designing Simple Programs",
    "section": "",
    "text": "© Philip Claude Caplan, Andrea Vaccari, and Phil Chodrow, 2022"
  },
  {
    "objectID": "labs/functions/index.html",
    "href": "labs/functions/index.html",
    "title": "Functions",
    "section": "",
    "text": "© Philip Claude Caplan, Andrea Vaccari, and Phil Chodrow, 2022"
  },
  {
    "objectID": "assignments.html",
    "href": "assignments.html",
    "title": "",
    "section": "",
    "text": "© Philip Claude Caplan, Andrea Vaccari, and Phil Chodrow, 2022"
  },
  {
    "objectID": "acknowledgements.html",
    "href": "acknowledgements.html",
    "title": "",
    "section": "",
    "text": "© Philip Claude Caplan, Andrea Vaccari, and Phil Chodrow, 2022"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "",
    "section": "",
    "text": "CSCI 0145, “Introduction to Computing,” is an introductory course in computer science at Middlebury College. It is one of several ways in which you might begin a computer science major at Midd. It’s also a great way for you to develop your computational skills to support other majors.\nThe primary aim of CSCI 0145 is to help you build strong foundations in computational thinking and programming skills. We will cover a fair amount of the Python programming language. That said, our primary focus will be on reasoning, program design, and implementation principles rather than the details of Python programming.\n© Philip Claude Caplan, Andrea Vaccari, and Phil Chodrow, 2022"
  },
  {
    "objectID": "index.html#instructor",
    "href": "index.html#instructor",
    "title": "",
    "section": "Instructor",
    "text": "Instructor\n\nHello! I’m Dr. Phil Chodrow, and I’ll be your instructor for this course. My pronouns are he/him/his.\nMy research focuses on network science, the study of connected systems in society and nature. I draw on methods from applied mathematics, machine learning, statistics, and physics. I also work on data science projects to promote equity and sustainability.\nI love ethical data science, effective teaching, Star Trek: Deep Space 9, cool math, cooking, tea, traditional martial arts, and Studio Ghibli movies."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "© Philip Claude Caplan, Andrea Vaccari, and Phil Chodrow, 2022"
  },
  {
    "objectID": "notes/12-iteration.html",
    "href": "notes/12-iteration.html",
    "title": "Iteration",
    "section": "",
    "text": "© Philip Claude Caplan, Andrea Vaccari, and Phil Chodrow, 2022"
  },
  {
    "objectID": "notes/01-expressions-and-variables.html",
    "href": "notes/01-expressions-and-variables.html",
    "title": "Expressions and Variables",
    "section": "",
    "text": "© Philip Claude Caplan, Andrea Vaccari, and Phil Chodrow, 2022"
  },
  {
    "objectID": "notes/00-welcome.html",
    "href": "notes/00-welcome.html",
    "title": "Welcome to CSCI 0145!",
    "section": "",
    "text": "Computational Thinking: you will express algorithms for solving daily problems in terms of pseudocode.\nPositionality and Collaboration: you will reflect on how your personal identities and experiences inform your coding practice.\nPython Programming: you will run simple Python commands and programs.\n\n\n\nBroadly speaking,\n\nComputer science is the scientific study of automated computation and its applications.\n\nYou are already great at solving problems that require computations. Here’s one:\n\nZenith has 12 apples. She gives 3 apples to Manuel and buys 6 apples from Jiao. How many apples does Zenith now have?\n\nZenith clearly has \\(12 - 3 + 6 = 15\\) apples now. I don’t know about you, but I’m really bad at arithmetic, so there’s a good chance I’ll make a mistake doing this simple calculation. Even worse, what if we change the numbers? What if on Monday Zenith starts with 17 apples, and on Tuesday she starts with 13 apples? This is where the computer comes in. It will allow us to abstract the apple calculation for the different scenarios we might expect. The term abstraction means that we will try to “compartmentalize” the different calculations, i.e. we will break up our bigger calculation into smaller pieces.\n\n\n\nBut how can we get the computer to do these calculations? The first thing we need to do is come up with a solution approach to our problem. This will be the “idea” we have in our heads of how we will solve the problem. For example, we can calculate how many apples Zenith has by taking her starting apples, subtracting those she gives to Manuel, and then adding the ones she bought from Jiao. Notice how we can describe the calculation of the remaining number of apples without actually specifying any of the numbers. As a result, this solution will always work. Unlike humans, computers don’t make mistakes. They do exactly what you tell them to do. If you give the computer all the apple values, no matter what they are, and tell the computer to do the arithmetic, it will give you the right answer.\nWe haven’t introduced any Python programming yet, but perhaps you can already understand this simple program:\n\n# define inputs: a user could change these to any numbers\nAPPLES_START  = 5\nAPPLES_GIVEN  = 3\nAPPLES_BOUGHT = 5\n\n# this line describes the solution approach\nAPPLES_FINAL = APPLES_START - APPLES_GIVEN + APPLES_BOUGHT\n\n# show the output\nAPPLES_FINAL\n\n7\n\n\nThis was our first example of an algorithm.\n\nAn algorithm is a description of a procedure for solving a problem.\n\nWell-designed algorithms have the following key characteristics:\n\nCorrectness: the algorithm correctly (and demonstrably) gives a correct solution to the stated problem.\nHalting: the algorithm terminates with the solution after a finite number of steps—we don’t have to wait forever for the answer!\nLack of ambiguity: each step of the algorithm is so clearly described that a mindless machine could follow it.\nGenerality: the algorithm solves a range of problems, not just one or two specific ones.\n\n\n\nLet’s say the problem is: you’re hungry. How do you solve this problem? The short answer is: eat some food! This is a good idea, but it’s not yet an algorithm because it doesn’t have the characteristics we described above:\n\nCorrectness: this approach won’t always give a correct solution to the problem, because it only tells you to eat some food. If you don’t eat enough food you’ll still be hungry.\nHalting: this approach will only terminate with the solution if you are in fact able to find some food.\nLack of ambiguity: this approach isn’t specific enough for a machine to follow. What does “go” mean? Which food should be sought out?\nGenerality: this approach is quite general as a solution to the hunger problem, so we can check that one off.\n\nHow could we make this procedure into a better algorithm? Here’s one way:\n\nStand up.\nWalk to the cafeteria.\nGrab a bowl.\nPour in some Cheerios.\nPour some almond milk into the bowl.\nEat Cheerios from bowl until no longer hungry.\n\nThis is closer to being a good algorithm.  Let’s check our criteria again:In fact, there’s not really a clear line between what is and isn’t an algorithm, or a good algorithm — it’s a matter of degree.\n\nCorrectness: the new approach specifies to continue eating until you are no longer hungry. This is an improvement, although the algorithm still isn’t guaranteed to fully resolve your hunger. What if you’re hungry for more than one bowl? What happens if there aren’t any Cheerios in the cafeteria?\nHalting: the approach now terminates with a result (not necessarily one that fully resolves your hunger) after a finite number of steps, since the bowl contains a finite number of cheerios.\nLack of ambiguity: we still have some problems here. For example, the approach never actually says to get a spoon…\nGenerality: this approach is now less general. It only really works for college students who are hungry for Cheerios. [This is a common pattern in the design of algorithms: improvements on some criteria come at the cost of other criteria.]\n© Philip Claude Caplan, Andrea Vaccari, and Phil Chodrow, 2022"
  },
  {
    "objectID": "notes/00-welcome.html#bugs",
    "href": "notes/00-welcome.html#bugs",
    "title": "Welcome to CSCI 0145!",
    "section": "Bugs",
    "text": "Bugs\nBecause our procedure above isn’t fully unambiguous, it’s not ready for us to give to a mindless computer or robot. What would happen if we did? Remember, computers do exactly what we tell them to. In step 4, did we say where to pour the Cheerios? Nope. They would probably end up on the floor. We also didn’t say anything about how to eat the cereal in step 6! Maybe the computer uses a fork to eat things by default. The end result is that you would have a bowl full of almond milk with cereal on the floor, while trying to eat the cereal with a fork. This kind of undesired result from an algorithm is called a bug.The term bug originates from an actual moth that Grace Hopper found while she worked on the Harvard Mark II (an early kind of calculator). Read more about this here."
  },
  {
    "objectID": "notes/00-welcome.html#generalization",
    "href": "notes/00-welcome.html#generalization",
    "title": "Welcome to CSCI 0145!",
    "section": "Generalization",
    "text": "Generalization\nNow, what if you felt like Cheerios today, but tomorrow you wanted Raisin Bran instead? There’s no reason to re-write all these steps, since the only thing that changes is the type of cereal we want to eat. This is where abstraction comes to the rescue again. The right way to go about solving this problem would be to “abstract away” some of the details so that we can re-use parts of the algorithm. This will make more sense when we start developing code."
  },
  {
    "objectID": "notes/preface.html",
    "href": "notes/preface.html",
    "title": "Lecture Notes",
    "section": "",
    "text": "© Philip Claude Caplan, Andrea Vaccari, and Phil Chodrow, 2022"
  },
  {
    "objectID": "notes/11-conditionals.html",
    "href": "notes/11-conditionals.html",
    "title": "Conditionals",
    "section": "",
    "text": "© Philip Claude Caplan, Andrea Vaccari, and Phil Chodrow, 2022"
  },
  {
    "objectID": "notes/10-functions.html",
    "href": "notes/10-functions.html",
    "title": "Functions",
    "section": "",
    "text": "© Philip Claude Caplan, Andrea Vaccari, and Phil Chodrow, 2022"
  },
  {
    "objectID": "notes/10-functions.html#second-part",
    "href": "notes/10-functions.html#second-part",
    "title": "Functions",
    "section": "More Functions",
    "text": "More Functions"
  },
  {
    "objectID": "guided-discovery/strings-1/index.html",
    "href": "guided-discovery/strings-1/index.html",
    "title": "Strings",
    "section": "",
    "text": "© Philip Claude Caplan, Andrea Vaccari, and Phil Chodrow, 2022"
  },
  {
    "objectID": "guided-discovery/functions/index.html",
    "href": "guided-discovery/functions/index.html",
    "title": "Guided Discovery: Practice With Functions",
    "section": "",
    "text": "© Philip Claude Caplan, Andrea Vaccari, and Phil Chodrow, 2022"
  },
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "",
    "section": "",
    "text": "CSCI 0145, “Introduction to Computing,” is an introductory course in computer science at Middlebury College. It is one of several ways in which you might begin a computer science major at Midd. It’s also a great way for you to develop your computational skills to support other majors.\nThe primary aim of CSCI 0145 is to help you build strong foundations in computational thinking and programming skills. We will cover a fair amount of the Python programming language. That said, our primary focus will be on reasoning, program design, and implementation principles rather than the details of Python programming.\n© Philip Claude Caplan, Andrea Vaccari, and Phil Chodrow, 2022"
  },
  {
    "objectID": "syllabus.html#books",
    "href": "syllabus.html#books",
    "title": "",
    "section": "Books",
    "text": "Books\nThere are no required books to purchase in this course. Required and optional readings will come from free online sources, especially including:\n\nHow to Think like a Computer Scientist: an interactive book with many embedded activities.\nFoundation of Python programming: another interactive book with a fair amount of overlapping with “How to think like a Computer Scientist”\nThinkPython: please note that despite providing a good introduction to Python, the language and examples used in this book are not the most inclusive. Most of the examples are drawn from the comedy routines of the British surrealist comedians “Monty Python (Links to an external site.)” which, to someone who has never seen any of their material, will not be particularly helpful.\nCourse notes: together with other members of the CS Department, we are putting together our own interactive notes for the intro courses. This is still a work in progress and they are constantly edited so, go back often to check since there might be new goodies appearing over time.\nPython 3.7 Documentation: This is the official documentation for the Python programming language. Following along with the Tutorial is an excellent way to develop your skills, and the Language Reference is also extremely helpful. Note that this is the documentation for Python 3.7, rather than the most current Python 3.10. This is because Python 3.7 is the version that comes bundled with Thonny, and is therefore the version we will use in this class. The differences between 3.7 and 3.10 are minimal and unlikely to ever come up in CSCI 0145."
  },
  {
    "objectID": "syllabus.html#python-thonny",
    "href": "syllabus.html#python-thonny",
    "title": "",
    "section": "Python: Thonny",
    "text": "Python: Thonny\nWe’ll write most of our Python code in Thonny. Thonny is a simple integrated development environment (IDE): a place to write, run, and troubleshoot code. It can be installed on Windows, Mac and Linux. Please see the Thonny website for installation instructions. Thonny comes bundled with Python version 3.7, which is the version that we will use throughout CSCI 0145.\n\n\n\nThe Thonny IDE.\nYou may already be familiar with a different IDE, and may prefer it to Thonny. While you are welcome to use your IDE of choice on your own time, we expect you to use Thonny during class time and when working with partners on labs. This is to ensure that we don’t have to spend precious group time with one partner getting used to another partner’s IDE."
  },
  {
    "objectID": "syllabus.html#help-forum-campuswire",
    "href": "syllabus.html#help-forum-campuswire",
    "title": "",
    "section": "Help Forum: Campuswire",
    "text": "Help Forum: Campuswire\nWe will use Campuswire as a question-and-answer forum related to course content. You’ll join Campuswire by clicking on a link provided on Canvas. A few basic policies:\n\n\n\nCampuswire, our Q&A forum.\n\nQuestions should usually be posted publicly. I reserve the right to make private questions public.\nPlease ask questions using your name (i.e. not anonymously). Use of names helps us establish a healthy and respectful learning community.\nBefore posting your question, please follow the steps outlined in Asking for Help.\nConceptual questions are always fine.\nCode that is directly related to lab or homework solutions should never be posted on Campuswire.\nIf you are having trouble with code in a lab or homework assignment, you should create a minimal reproducible example of your issue. \n\nA minimal reproducible example is sometimes called a reprex.Campuswire isn’t here just for me to help you – it’s also for you to help each other. Both excellent, thoughtful questions and"
  },
  {
    "objectID": "syllabus.html#assignments-gradescope-and-canvas",
    "href": "syllabus.html#assignments-gradescope-and-canvas",
    "title": "",
    "section": "Assignments: Gradescope and Canvas",
    "text": "Assignments: Gradescope and Canvas\nGradescope is one of the places in which you’ll submit graded assignments for this course. Most assignments, including homework assignments, labs, and guided discovery activities will be submitted to Gradescope. Homework assignments and labs will be assessed for correctness, while guided discovery activities will simply be assessed for completion.\n\n\n\nGradescope, our primary format for submitting graded work.\nWe’ll also submit some assignments through Canvas."
  },
  {
    "objectID": "syllabus.html#beyond-csci-0145",
    "href": "syllabus.html#beyond-csci-0145",
    "title": "",
    "section": "Beyond CSCI 0145",
    "text": "Beyond CSCI 0145\n\nAdvice and Letters of Recommendation\n\nAdvice\nI am always happy to talk with you about your future plans, including internships, research opportunities, and graduate school applications. Because I am a creature of the academy, I am less knowledgeable about industry jobs, although you are welcome to ask about those too.\n\n\nLetters of Recommendation\nIf you have completed a course with me or are currently enrolled, you are welcome to request a letter from me. If I feel that I am not able to write you a strong letter, I will tell you – but if you still want a letter from me, I will still write it.\nPlease keep in mind that I can write stronger letters for students whom I see more frequently, such as in lecture or office hours. If you’d like a letter, talking to me in these contexts, or scheduling another meeting time, is highly recommended.\nTo request a letter, fill out this request form! Please give me at least one month of advance notice when possible.\n\n\nWhen I Won’t Write a Letter\nAs a matter of moral principle, I will not write letters of recommendation for programs or jobs involving any of the following:\n\nPolicing (including but not limited to predictive policing, development of algorithms that predict recidivism, etc.);\nMilitary applications (such as internships at the Department of Defense or any of its international counterparts);\nWeapons manufacturing, broadly construed;\nIntelligence gathering (such as internships at the NSA, FBI, or any international counterpart).\n\nI am very happy to discuss this policy with any student who has questions. Conversations about when and how mathematics, data science, and programming should be used are lacking in our community. If you’d like to engage me in such a conversation, that would be great! However, this policy is non-negotiable. Therefore, if I refuse to write you a letter on these grounds, please know that it doesn’t reflect on your ability to succeed in this course, your career potential, your worth as a person, or whether I like you.\nThe Just Mathematics Collective has compiled a list of resources for students on making ethical career decisions, which is available here. The text of this section is lightly modified from their suggested text on letter-writing."
  },
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "",
    "section": "",
    "text": "Introduction \n            \n        \n            \n                    M\n                    \n                    Sep. 12 \n             Welcome to CSCI 0145!\n   \n        \n        \n             \n                We discuss the structure of the class and briefly introduce computational thinking. \n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Computational Thinking  \n                            Positionality and Collaboration  \n            \n            \n                    Reading\n                            Course Syllabus  \n                            What is this course about?  \n            \n            \n            \n            \n            \n        \n        \n            \n                    W\n                    \n                    Sep. 14 \n             Expressions and Variables\n   \n        \n        \n             \n                We discuss expressions -- the simplest recipes for computations -- and variables, which allow us to store the results of computations for later use. \n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Computational Thinking  \n                            Python Programming  \n            \n            \n                    Reading\n                            Expressions and Variables  \n            \n            \n            \n            \n            \n        \n        \n            \n                    T\n                    \n                    Sep. 15 \n             Guided Discovery: Indexing and String Manipulation\n   \n        \n        \n             \n                We learn some ways to manipulate text, save the results, and show them to the user. We'll come back to advanced text manipulation much later in the course. \n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Python Programming  \n                            Applications  \n            \n            \n                    Activity\n                            (link)  \n            \n            \n            \n            \n            \n        \n        \n            \n                    F\n                    \n                    Sep. 16 \n             Lab: Designing Simple Programs\n   \n        \n        \n             \n                We write simple programs to enable user interaction using our new programming skills. \n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Python Programming  \n                            Design and Collaboration  \n            \n            \n                    Activity\n                             (link)   \n            \n            \n            \n            \n            \n        \n            \n             Fundamentals of Procedural Programming \n            \n        \n            \n                    M\n                    \n                    Sep. 19 \n             Functions\n   \n        \n        \n             \n                Functions are reusable computational recipes. We discuss the basic ingredients of a function and work through some simple examples. \n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Computational Thinking  \n                            Python Programming  \n            \n            \n                    Reading\n                            Functions  \n            \n            \n            \n            \n                    Due\n                            Lab 1 \n            \n        \n        \n            \n                    W\n                    \n                    Sep. 21 \n             More on Functions\n   \n        \n        \n             \n                We discuss some important considerations for writing functions and using functions that other people have written. Our two main topics are documentation and modules. \n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Computational Thinking  \n                            Python Programming  \n            \n            \n                    Reading\n                            More on Functions  \n            \n            \n            \n            \n            \n        \n        \n            \n                    T\n                    \n                    Sep. 22 \n             Guided Discovery: Practice With Functions\n   \n        \n        \n             \n                TBD\n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Computational Thinking  \n                            Python Programming  \n            \n            \n                    Activity\n                            (link)  \n            \n            \n            \n            \n            \n        \n        \n            \n                    F\n                    \n                    Sep. 23 \n             Lab: Writing (About) Functions \n   \n        \n        \n             \n                TBD\n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Python Programming  \n                            Design and Collaboration  \n            \n            \n                    Activity\n                            (link)  \n            \n            \n            \n            \n            \n        \n        \n\nNo matching items\n\n  © Philip Claude Caplan, Andrea Vaccari, and Phil Chodrow, 2022"
  }
]