[
  {
    "objectID": "labs/decision-making/index.html",
    "href": "labs/decision-making/index.html",
    "title": "Developers as Decision-Makers",
    "section": "",
    "text": "This lab is adapted from an activity created by Evan Peck (Bucknell University).\nIt’s common for us to talk about algorithms as “making decisions.” But algorithms don’t really have judgment or the ability to reason about the pros and cons of a specific case. As you know, algorithms do nothing more or less than exactly what we, the programmers, tell them to do. It is our responsibility to decide what rules and mechanisms the algorithm will use in its decision process.\nThe decisions we make in code impact the lives of real people. For example, the Silicon Valley Triage Tool is an algorithm that identifies homeless people for whom giving them housing would cost the public less than keeping them homeless. So even as we learn the simple structures of code, we need to think about how can we make good decisions as program designers? When the livelihood of people depend on us, how can we be fair?\nWe’re going to explore this idea in a context that might be more familiar to you – college housing. Colleges like Middlebury select methods that determine the order in which students can choose their housing. You might not think of it this way, but this is an automated, systematic method for solving a problem: an algorithm. In this lab, you’ll have the opportunity to design your own algorithm. We’re also going to briefly explore the human-centered design process to ensure that the decisions we make as algorithm designers are never untethered from the people we impact.\nIn this lab, you’ll practice:\n© Philip Claude Caplan, Andrea Vaccari, and Phil Chodrow, 2022"
  },
  {
    "objectID": "labs/decision-making/index.html#lab-template-file",
    "href": "labs/decision-making/index.html#lab-template-file",
    "title": "Developers as Decision-Makers",
    "section": "Lab Template File",
    "text": "Lab Template File\nHere is the template file you should download in order to complete this activity. You and your partner expected to (a) work together on the lab and (b) submit your own files individually on Gradescope, acknowledging each other’s collaboration.\nIf you are having trouble accessing the template file, you can also try this link.\nIn either case, highlight all the text, copy it, and paste it into a blank Thonny file."
  },
  {
    "objectID": "labs/decision-making/index.html#who-chooses-housing-first",
    "href": "labs/decision-making/index.html#who-chooses-housing-first",
    "title": "Developers as Decision-Makers",
    "section": "Who Chooses Housing First?",
    "text": "Who Chooses Housing First?\nEvery year, Middlebury students select their housing for the following year. Your job is to build an algorithm that will help determine the order in which students get to select their housing. To keep things manageable, we’re going to use a point system:\n\nStudents are awarded a number of points based on a variety of factors.\nStudents with the most points get the first choice of housing.\n\nThis is a real approach used by many colleges and universities. For example, the following is a real point system used by another liberal arts college in the US:\n\nCurrent Freshman: 1 point\nCurrent Sophomore: 2 points\nCurrent Junior: 3 points\nCurrent Senior: 4 points\n23+ Years of Age: 1 point\nFull-time, Off-Campus Program credit (e.g. student teaching): 1 point\nAcademic Probation: -1 point\nAcademic Suspension: -2 points\nOn Disciplinary Probation at Any Time During the Academic Year: -3 points\n\nFor example, a junior (3 points) who ise 23 years old (1 point) would have priority over a senior (4 points) who has on academic probation (-1 point).\nYour goal: Create a program that assigns points to students in order to prioritize them in housing selection.\nBut wait! Don’t start yet. First…"
  },
  {
    "objectID": "labs/prelims/index.html",
    "href": "labs/prelims/index.html",
    "title": "Designing Simple Programs",
    "section": "",
    "text": "© Philip Claude Caplan, Andrea Vaccari, and Phil Chodrow, 2022"
  },
  {
    "objectID": "labs/functions/index.html",
    "href": "labs/functions/index.html",
    "title": "Functions",
    "section": "",
    "text": "© Philip Claude Caplan, Andrea Vaccari, and Phil Chodrow, 2022"
  },
  {
    "objectID": "labs/recursion-turtle/index.html",
    "href": "labs/recursion-turtle/index.html",
    "title": "Lab Activity: Fractals with Turtle",
    "section": "",
    "text": "In this assignment, you’ll use the Turtle graphics system that we introduced in class, along with your powerful new recursion techniques, to create fractals. A fractal is a simple pattern that repeats itself on smaller scales, resulting in attractive pictures.\n© Philip Claude Caplan, Andrea Vaccari, and Phil Chodrow, 2022"
  },
  {
    "objectID": "labs/recursion-turtle/index.html#part-1-fractal-tree",
    "href": "labs/recursion-turtle/index.html#part-1-fractal-tree",
    "title": "Lab Activity: Fractals with Turtle",
    "section": "Part 1: Fractal Tree",
    "text": "Part 1: Fractal Tree\n An example of a fractal tree, very similar to the one we will make today with Turtle.  Image source\nWe’re going to start with fractal trees. A fractal tree is a graphic in which a single line divides into two or more lines at an angle, repeatedly. The result is an elegant tree-like structure.\n\n0. Create Your Script\nMake a new file called fractal-tree.py and save it somewhere you’ll be able to find it.\n\n\n1. Draw a Vertical Line\nLike last time, we’re going to practice incremental development. We’ll start with a very simple function. Then, at each stage, we’ll add just a bit of complexity until we achieve the behavior that we are looking for.\nHere’s the first step:\n\nDefine a function called draw_tree() that accepts a single argument called length.\nThis function should cause the turtle to move forward by length, and then backwards by the same length. So, the turtle ends where it started.\n\nCall your function like this:\ndraw_tree(100)\nAt this stage, the expected result is that your turtle moves up and then down, tracing a single vertical line.\nHint: Remember that you can move the turtle forward with the command turtle.forward(length).\n\n\n2. Pause to Look Around\nNext, make your turtle look around after the forward step and before the backward step.\n\nAdd an argument to draw_tree() called angle.\nAfter the forward step, make the turtle turn angle degrees to the right.\nThen, make the turtle turn 2*angle degrees to the left.\nMake the turtle turn angle degrees to the right again.\nThen finish with the backward step.\n\nCall your function like this:\ndraw_tree(100, angle = 90)\nThe end result is still a simple vertical line. When you run the file, you should still see your turtle move straight up and down. After it moves up, though, you should see it “look around” to both the right and the left before returning to the starting point.\nHint: Remember that you can make the turtle turn left with turtle.left(angle).\n\n\n3. Establish the Base Case\nWe are going to use recursion to draw the tree. Modify your function in the following ways:\n\nAdd an argument to your function called level.\nAdd an if-statement to your function. Check if level == 0. If so, do nothing! You can do nothing by simply writing pass inside the body of the if-statement. This is our base case.\nIn the else clause, place the code you’ve written previously.\n\nCall your function twice:\ndraw_tree(100, angle = 90, level = 0) # should do nothing\ndraw_tree(100, angle = 90, level = 1) # should do same thing as in Part 2\n\n\n4. Implement the Recursive Step\nThis is where the magic happens! Add two recursive function calls, one immediately after the turtle turns right and another immediately after the turtle turns left.\nEach call should decrease the length and the level.\n\nDecrease length by a multiple. For example, the new length is 75% of the old length.\nDecrease level by 1. For example, if the previous level was 5, the new level is 4.\n\nThe purpose of decreasing the level is to ensure that your function will eventually stop.\nHere’s a sample function call and result:\n Example output for a tree with 3 levels.\ndraw_tree(100, angle = 45, level = 3)\nYour result might be a little different, depending on exactly how you chose to reduce the length in each step. In any case, however, you should see a “tree” with two large branches and four smaller branches.\nHere’s another one. The first command makes the turtle move more quickly, which is helpful when the figure gets more complex.\n Example output for a tree with 7 levels\nturtle.speed(.1)\ndraw_tree(100, angle = 15, level = 7)\n\n\n5. Make Some Pretty Pictures!\nPlay a little with all three arguments of the draw_tree() function in order to produce some attractive trees.\n\n\n6. Leaves\n Example output for the “Leaves” problem.\nThe commands turtle.color(\"green\") and turtle.color(\"brown\") will change the color of the line drawn by the turtle. The command turtle.circle(4) will draw a circle. Using these new commands, add color and leaves to your tree.\nIf your implementation results in each branch having two green circular leaves (like mine does above), explain this: why are there two circles on each branch?"
  },
  {
    "objectID": "labs/recursion-turtle/index.html#create-your-script-1",
    "href": "labs/recursion-turtle/index.html#create-your-script-1",
    "title": "Lab Activity: Fractals with Turtle",
    "section": "0. Create your script",
    "text": "0. Create your script\nCreate a new Python file called koch-curve.py and save it somewhere where you’ll be able to find it."
  },
  {
    "objectID": "labs/recursion-turtle/index.html#add-some-boilerplate",
    "href": "labs/recursion-turtle/index.html#add-some-boilerplate",
    "title": "Lab Activity: Fractals with Turtle",
    "section": "1. Add Some Boilerplate",
    "text": "1. Add Some Boilerplate\ndef draw_scene():\n    \"\"\"Setup the canvas for drawing the curve and draw it.\"\"\"\n\n    # pick up the pen and move the turtle so it starts at the \n    # left edge of the canvas (don't worry about this yet)\n    turtle.up()\n    turtle.goto(-turtle.window_width()/2 + 20, 0)\n    turtle.down()\n\n    # draw the curve by calling your function\n    draw_koch(200, 0)\n    \n    # finished\n    turtle.done()\n    \ndraw_scene()\nCopy and paste the code above into your script file. This code is primarily just here to make the drawing look a bit nicer. Your job is to implement the function draw_koch()."
  },
  {
    "objectID": "labs/recursion-turtle/index.html#define-draw_koch",
    "href": "labs/recursion-turtle/index.html#define-draw_koch",
    "title": "Lab Activity: Fractals with Turtle",
    "section": "2. Define draw_koch()",
    "text": "2. Define draw_koch()\nDeclare the function draw_koch() so that it takes two arguments, called length and levels. We are going to implement this function in a recursive fashion."
  },
  {
    "objectID": "labs/recursion-turtle/index.html#write-the-base-case",
    "href": "labs/recursion-turtle/index.html#write-the-base-case",
    "title": "Lab Activity: Fractals with Turtle",
    "section": "3. Write the Base Case",
    "text": "3. Write the Base Case\nStart by writing an if-statement, with the if clause corresponding to the base case:\n\nWhen levels is 0, draw a straight line of length length, using the turtle.forward(length) command.\n\nYou might find it useful to refer to some of the examples from our lecture notes on recursion in order to structure this code. The power example might be especially useful."
  },
  {
    "objectID": "labs/recursion-turtle/index.html#run-your-script",
    "href": "labs/recursion-turtle/index.html#run-your-script",
    "title": "Lab Activity: Fractals with Turtle",
    "section": "4. Run your script",
    "text": "4. Run your script\nAt this point, running your script should cause the turtle to draw a line. That’s it!"
  },
  {
    "objectID": "labs/recursion-turtle/index.html#begin-the-recursive-case",
    "href": "labs/recursion-turtle/index.html#begin-the-recursive-case",
    "title": "Lab Activity: Fractals with Turtle",
    "section": "5. Begin the Recursive Case",
    "text": "5. Begin the Recursive Case\nNow we are going to start working on the recursive case. Here’s how it should work:\nIf levels is greater than 0, draw a “first generation curve.” A first-generation curve is like the one at the very top of the diagram in this activity. To draw this curve:\n\nMove forward by distance length/3.\nTurn left by 60 degrees.\nMove forward by distance length/3.\nTurn right by 120 degrees.\nMove forward by distance length/3.\nTurn left by 60 degrees.\nMove forward by distance length/3."
  },
  {
    "objectID": "labs/recursion-turtle/index.html#test",
    "href": "labs/recursion-turtle/index.html#test",
    "title": "Lab Activity: Fractals with Turtle",
    "section": "6. Test",
    "text": "6. Test\nModify the function draw_scene by replacing draw_koch(200, 0) with draw_koch(200, 1). Check that the output resembles the shape at the top of this section."
  },
  {
    "objectID": "labs/recursion-turtle/index.html#implement-recursion",
    "href": "labs/recursion-turtle/index.html#implement-recursion",
    "title": "Lab Activity: Fractals with Turtle",
    "section": "7. Implement Recursion",
    "text": "7. Implement Recursion\nOk, time for some recursion! In your draw_koch() function, in the recursive case, replace all four calls to go forward with calls to draw_koch(). The arguments to draw_koch() should be length/3 and levels  - 1."
  },
  {
    "objectID": "labs/recursion-turtle/index.html#test-1",
    "href": "labs/recursion-turtle/index.html#test-1",
    "title": "Lab Activity: Fractals with Turtle",
    "section": "8. Test!",
    "text": "8. Test!\nModify draw_scene() so that we draw a koch curve with 6 levels. You should see a shape resembling the bottom one in our introductory diagram. I would suggest adding the line turtle.tracer(False) before you actually call draw_scene(). This will skip the animation, showing you only the final product. You might also want to increase the length: 1000 worked pretty well for me."
  },
  {
    "objectID": "labs/recursion-turtle/index.html#a-special-snowflake",
    "href": "labs/recursion-turtle/index.html#a-special-snowflake",
    "title": "Lab Activity: Fractals with Turtle",
    "section": "9. A Special Snowflake",
    "text": "9. A Special Snowflake\nWrite and call a function called draw_snowflake(length, levels). Your function should:\n\nCall draw_koch(length, levels).\nTurn to the right by 120 degrees.\nRepeat the above commands two more times.\n\nThen, write a function called draw_scene2(). You can start by copying draw_scene(). Then, within draw_scene2(), draw at least three snowflakes. Your snowflakes should not overlap (use turtle.up() and turtle.down() to move the turtle without drawing a line). Each of the different snowflakes should have different values of length and levels. If you’d like, you can also use commands like turtle.color(\"red\") to change the color of the turtle for each snowflake."
  },
  {
    "objectID": "assignments.html",
    "href": "assignments.html",
    "title": "Index of Assignments",
    "section": "",
    "text": "Title\n\n\nsummary\n\n\n\n\n\n\nDesigning Simple Programs\n\n\n\n\n\n\nFunctions\n\n\nWe work with functions!\n\n\n\n\nDevelopers as Decision-Makers\n\n\nSome stuff we do.\n\n\n\n\nLab Activity: Fractals with Turtle\n\n\n\n\n\n\n\n\nNo matching items\n© Philip Claude Caplan, Andrea Vaccari, and Phil Chodrow, 2022"
  },
  {
    "objectID": "assignments.html#guided-discovery",
    "href": "assignments.html#guided-discovery",
    "title": "Index of Assignments",
    "section": "Guided Discovery",
    "text": "Guided Discovery\n\n\n\n\n\n\nTitle\n\n\nsummary\n\n\nfile\n\n\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "assignments.html#homework-exercises",
    "href": "assignments.html#homework-exercises",
    "title": "Index of Assignments",
    "section": "Homework Exercises",
    "text": "Homework Exercises"
  },
  {
    "objectID": "philosophy.html",
    "href": "philosophy.html",
    "title": "",
    "section": "",
    "text": "© Philip Claude Caplan, Andrea Vaccari, and Phil Chodrow, 2022"
  },
  {
    "objectID": "assignments/guided-discovery/functions-and-flow/index.html",
    "href": "assignments/guided-discovery/functions-and-flow/index.html",
    "title": "Guided Discovery: Functions",
    "section": "",
    "text": "In this Guided Discovery activity, you’ll continue to solve problems with strings, while practicing your skills writing functions. This assignment will help us practice computational thinking and Python programming.\nA new idea we’re practicing here is progressive development. This refers to making small, frequent checks to test the correct functioning of your code. We’ll be making small tests throughout this assignment in order to see whether our code is doing what’s expected.\nThis activity is adapted from Prof. Andrea Vaccari.\n\n\n\nEither you and your partner have completed the entire activity, including a tested and finished function under “Towards Inclusive Design” or…\n…50 minutes have passed.\n\nOnce you’re done, download your main.py file and submit it under Guided Discovery 2 on Gradescope. Make sure to add both partners to the submission!\nAs usual, you’re welcome to use the space for up to 75 minutes if you’d like to keep working on the assignment. This is great for your learning, but not required!\n\n\n\nHere is the code file for this activity.\n© Philip Claude Caplan, Andrea Vaccari, and Phil Chodrow, 2022"
  },
  {
    "objectID": "assignments/guided-discovery/functions-and-flow/index.html#assumptions",
    "href": "assignments/guided-discovery/functions-and-flow/index.html#assumptions",
    "title": "Guided Discovery: Functions",
    "section": "Assumptions",
    "text": "Assumptions\nAt this stage, we are going to proceed under the following assumptions:\n\nThe user has one given name and one family name, separated by spaces.\nThe user types their given name first, followed by a space, followed by their family name."
  },
  {
    "objectID": "assignments/guided-discovery/functions-and-flow/index.html#technical-specifications",
    "href": "assignments/guided-discovery/functions-and-flow/index.html#technical-specifications",
    "title": "Guided Discovery: Functions",
    "section": "Technical Specifications",
    "text": "Technical Specifications\n\nYou may assume that the user will always enter a string, and that they will not make typos (e.g. they will always remember to type the space).\nYour output should include the first letter of the user’s given name, followed by the user’s family name.\nYour output should not exceed 8 characters. If the username would be longer than 8 characters, return only the first 8.\nYour output should be entirely in lowercase characters."
  },
  {
    "objectID": "assignments/guided-discovery/functions-and-flow/index.html#pair-programming",
    "href": "assignments/guided-discovery/functions-and-flow/index.html#pair-programming",
    "title": "Guided Discovery: Functions",
    "section": "Pair Programming",
    "text": "Pair Programming\nThis Guided Discovery activity is our first experience with pair programming. You’ll read more about How Pair Programming Really Works in preparation for our nex quiz.\nThe member of the pair whose birthday is closest to the current date starts as the Navigator. The Navigator’s job is to read the directions carefully and make suggestions to the Driver about what code to write next. The Navigator also suggests what tests to run of the current code. The Navigator does not write code.\nThe other member of the pair is the Driver. The Driver’s job is to write code in response to the Navigator’s suggestions. The Driver only writes code when directed by the Navigator.\nWe’ll switch roles approximately halfway through the activity."
  },
  {
    "objectID": "assignments/guided-discovery/functions-and-flow/index.html#reflect-on-the-assumptions-and-specifications",
    "href": "assignments/guided-discovery/functions-and-flow/index.html#reflect-on-the-assumptions-and-specifications",
    "title": "Guided Discovery: Functions",
    "section": "1. Reflect On The Assumptions And Specifications",
    "text": "1. Reflect On The Assumptions And Specifications\nBefore you start coding, take a moment to discuss with your partner:\n\nDo these assumptions work for everyone? Who may be left out?\nWho could be advantaged or disadvantaged by the technical specification that only 8 characters of the family name are used?\n\nAfter we implement the first version of this function, we’ll come back the function and"
  },
  {
    "objectID": "assignments/guided-discovery/functions-and-flow/index.html#write-your-function-header-and-docstring",
    "href": "assignments/guided-discovery/functions-and-flow/index.html#write-your-function-header-and-docstring",
    "title": "Guided Discovery: Functions",
    "section": "2. Write Your Function Header And Docstring",
    "text": "2. Write Your Function Header And Docstring\nIn the file main.py, write the header (the part that begins with def) and a docstring for your function. Your docstring should describe what the function does, the expected types of its input(s), its return value, and its assumptions/specifications."
  },
  {
    "objectID": "assignments/guided-discovery/functions-and-flow/index.html#find-the-space",
    "href": "assignments/guided-discovery/functions-and-flow/index.html#find-the-space",
    "title": "Guided Discovery: Functions",
    "section": "3. Find The Space",
    "text": "3. Find The Space\nRemember, we’ve assumed that the user has a given name and a family name, separated by a space. Let’s find it!\nStrings have methods: functions that can be called using the syntax string.function(). The method string.find(char) will return the first index on which the character char appears. Use this method to find the location of the first space and save it to a variable called space_location. You should do this within the body of your function, like this:\ndef some_function():\n  # code in here is in the body of the function"
  },
  {
    "objectID": "assignments/guided-discovery/functions-and-flow/index.html#find-the-users-family-name",
    "href": "assignments/guided-discovery/functions-and-flow/index.html#find-the-users-family-name",
    "title": "Guided Discovery: Functions",
    "section": "4. Find The User’s Family Name",
    "text": "4. Find The User’s Family Name\nUsing string slicing and the space_location variable, find and return the user’s family name. Hint: s[5:] is everything including and after index 5 in the string s."
  },
  {
    "objectID": "assignments/guided-discovery/functions-and-flow/index.html#test-family-name-extraction",
    "href": "assignments/guided-discovery/functions-and-flow/index.html#test-family-name-extraction",
    "title": "Guided Discovery: Functions",
    "section": "5. Test Family Name Extraction",
    "text": "5. Test Family Name Extraction\nAt this stage, if you run the file main.py, you should expect that the generated username is just the family name of the user. Please check this, and make adjustments as necessary.\nNote: It’s ok that this isn’t actually the long-term result we want! It’s just an intermediate step to make sure that we understand what our function is doing so far."
  },
  {
    "objectID": "assignments/guided-discovery/functions-and-flow/index.html#switch-roles",
    "href": "assignments/guided-discovery/functions-and-flow/index.html#switch-roles",
    "title": "Guided Discovery: Functions",
    "section": "5.5 Switch Roles",
    "text": "5.5 Switch Roles\nPlease swap! The previous Navigator is now the Driver, and the previous Driver is now the Navigator."
  },
  {
    "objectID": "assignments/guided-discovery/functions-and-flow/index.html#form-the-long-username",
    "href": "assignments/guided-discovery/functions-and-flow/index.html#form-the-long-username",
    "title": "Guided Discovery: Functions",
    "section": "6. Form The (Long) Username",
    "text": "6. Form The (Long) Username\nNow create a variable inside your function called long_username that holds the long username, which is the first letter of the given name followed by the entire family name."
  },
  {
    "objectID": "assignments/guided-discovery/functions-and-flow/index.html#test-long-username",
    "href": "assignments/guided-discovery/functions-and-flow/index.html#test-long-username",
    "title": "Guided Discovery: Functions",
    "section": "7. Test Long Username",
    "text": "7. Test Long Username\nAgain run main.py and check that you are getting the result you would expect."
  },
  {
    "objectID": "assignments/guided-discovery/functions-and-flow/index.html#convert-to-lowercase",
    "href": "assignments/guided-discovery/functions-and-flow/index.html#convert-to-lowercase",
    "title": "Guided Discovery: Functions",
    "section": "8. Convert To Lowercase",
    "text": "8. Convert To Lowercase\nThe returned username is expected to be in lowercase. Create a new variable called long_username_lower that holds the string in lowercase.\nHint: my_string.lower()"
  },
  {
    "objectID": "assignments/guided-discovery/functions-and-flow/index.html#limit-to-8-characters",
    "href": "assignments/guided-discovery/functions-and-flow/index.html#limit-to-8-characters",
    "title": "Guided Discovery: Functions",
    "section": "9. Limit to 8 Characters",
    "text": "9. Limit to 8 Characters\nCreate a variable called username which holds the final username to be returned. You can create it just by using a string slice to ensure that the final output is no more than 8 characters. Return the result."
  },
  {
    "objectID": "assignments/guided-discovery/functions-and-flow/index.html#test",
    "href": "assignments/guided-discovery/functions-and-flow/index.html#test",
    "title": "Guided Discovery: Functions",
    "section": "10. Test",
    "text": "10. Test\nTest your function with both partners to ensure that you obtain the results you expect."
  },
  {
    "objectID": "assignments/guided-discovery/functions-and-flow/index.html#make-a-plan",
    "href": "assignments/guided-discovery/functions-and-flow/index.html#make-a-plan",
    "title": "Guided Discovery: Functions",
    "section": "Make a Plan",
    "text": "Make a Plan\nRecall your discussion with your partner from the beginning of this assignment about who is not served well by the assumptions and specifications we made previously.\nThen, modify your function to make it more inclusive! When planning your function, please make use of at least one if-else code block.\nYou should switch Driver and Navigator at least one more time during this part of the activity. Work with your partner to find the right time."
  },
  {
    "objectID": "assignments/guided-discovery/functions-and-flow/index.html#if-you-need-ideas",
    "href": "assignments/guided-discovery/functions-and-flow/index.html#if-you-need-ideas",
    "title": "Guided Discovery: Functions",
    "section": "If You Need Ideas",
    "text": "If You Need Ideas\n\nIn many nations and language communities, the family name of an individual is actually first, with the given name second. Add an argument to your function called family_name_is_first. If this argument is passed with value True, the first name in the string is interpreted as the family name. For example:\n\nusername_generator(\"Ai Weiwei\", family_name_is_first = True) \nwai                                                          \n\nMany people born in Spanish-speaking countries have two family names. Children of heterosexual marriages often have a first surname corresponding to their father’s family line, and a second surname corresponding to their mother’s. For example, the author Gabriel García Márquez has a given name (Gabriel), a paternal family name (García), and a maternal family surname (Márquez). Add an argument to your function called which_surname that allows the user to specify which surname will be used to generate the username. You should accept options \"first\", \"last\", or “both”. For example:\n\nusername_generator(Gabriel García Márquez, which_surname = \"first\")\nggarcía\nusername_generator(Gabriel García Márquez, which_surname = \"last\")\ngmárquez\nusername_generator(Gabriel García Márquez, which_surname = \"both\")\nggarcíam"
  },
  {
    "objectID": "assignments/guided-discovery/recursion-performance/index.html",
    "href": "assignments/guided-discovery/recursion-performance/index.html",
    "title": "Guided Discovery: Recursion and Performance",
    "section": "",
    "text": "As usual, you should work on this assignment in pairs, using Thonny. One of you should then submit on Gradescope, adding the other partner’s name to the submission.\n\nThe Fibonacci Numbers\nThe Fibonacci sequence is a famous sequence of numbers \\(f_0, f_1, f_2, f_3 \\ldots\\) defined by a recursive relationship. We define \\(f_0 = 1\\) and \\(f_1 = 1\\). Then, to calculate the \\(n\\)th Fibonacci number, we use the recursive relationship\n\\[\nf_n = f_{n-1} + f_{n-2}\\;.  \n\\tag{1}\\]\nSo, for example, suppose that we wanted to compute the 5th Fibonacci number \\(f_5\\). We can do this by first computing \\(f_2\\), \\(f_3\\), and \\(f_4\\). We would find:\n\\[\n\\begin{aligned}\nf_2 &= f_1 + f_0 = 1 + 1 = 2 \\\\\nf_3 &= f_2 + f_1 = 2 + 1 = 3 \\\\\nf_4 &= f_3 + f_2 = 3 + 2 = 5 \\\\\nf_5 &= f_4 + f_3 = 5 + 3 = 8  \n\\end{aligned}\n\\]\nThrough this sequence of calculations, we would find that \\(f_5 = 8\\).\n An example of a Fibonacci spiral that is defined in part by the Fibonacci numbers.\nThe Fibonacci numbers are associated with a wide range of very beautiful mathematical concepts, graphics, and theorems.\n\n\n0. Create a Blank Script\nCreate a blank Python script called fibonacci.py. Save it somewhere where you’ll be able to find it and open it in Thonny.\n\n\n1. Implement fib(n)\nWrite a function called fib() such that, if n is an integer, fib(n) is the nth Fibonacci number. For example, fib(5) should return 8.\nYour function should be recursive. The base case is the specification for \\(f_0\\) and \\(f_1\\), while the recursive step can be performed using Equation 1.\n\n\n2. Timing fib(n)\nHow long does it take fib(n) to run? We can check this using the time module. Add the following line to the top of your script:\nimport time\nYou can use the function time.process_time() to determine how long it takes a piece of code to run, like this:\nbegin = time.process_time()\nmy_cool_function()\nend = time.process_time()\ntime_elapsed = end - begin # measured in units of seconds\nUsing this approach, write a function called time_fib(n). This function should both:\n\nReturn the nth Fibonacci number AND\nPrint a message describing the time that elapsed while computing this number.\n\nFor example, after defining this function, you should be able to include the lines below with the following result:\nf = time_fib(5)\nprint(f)\n3.999e-06 seconds elapsed\n5\nHINTS:\n\nYou’ll need to convert the time elapsed to a string using the str(x) pattern before including it in your printed message.\nInside your function, you’ll need to first save the result of fib(n) to a variable, then print your message, then return the saved variable.\n\n\n\n3. Timing Experiments\nTake notes on how long it takes to compute fib(n) for several small values of n. For example, you could choose n ranging between 20 and 25. You should take these notes as comments in your script file.\nDo you notice any patterns? Approximately how much more time does it take to do time_fib(25) than it does to do time_fib(24)?\n\n\n4. How Many Function Calls?\nNow that we’ve learned something about the time our function takes to execute, let’s see if we can figure out these results. Why does computing just one Fibonacci number take so much longer than computing the one before it?\nSuppose that I do fib(1). How many times in total will the fib() function be called? What about if I do fib(2)? What about fib(3)? Write down your reasoning as comments in your Python file.\n\n\n5. Counting Function Calls\nAdd an argument to fib called verbose. That is, your function definition should now look like this:\ndef fib(n, verbose):\n    # your code here\nIf verbose is True, then print a simple message. Your message could just be a \"-\" or anything else. Make sure that you modify the recursive calls to your function so that they also accept the verbose argument.\nOnce you’ve done this, call fib a few times with very small values of n to see how many times the function gets called in total. Here’s the code that I suggest you run:\nn = 1\nprint(\"n = \" + str(n))\nprint(\"-----\")\nfib(n, True)\nn = 2\nprint(\"n = \" + str(n))\nprint(\"-----\")\nfib(n, True)\nn = 3\nprint(\"n = \" + str(n))\nprint(\"-----\")\nfib(n, True)\nn = 4\nprint(\"n = \" + str(n))\nprint(\"-----\")\nfib(n, True)\nIt’s fine to copy and paste this code into Thonny if you want to.\nBy counting the number of messages printed, see if you can find the pattern in how many times the function is called. Can you relate this to your findings about the amount of time needed to execute the function?\n\n\n\n\n  © Philip Claude Caplan, Andrea Vaccari, and Phil Chodrow, 2022"
  },
  {
    "objectID": "tools.html",
    "href": "tools.html",
    "title": "Course Resources",
    "section": "",
    "text": "There are no required books to purchase in this course. Required and optional readings will come from free online sources, especially including:\n\nHow to Think like a Computer Scientist: an interactive book with many embedded activities.\nFoundation of Python programming: another interactive book with a fair amount of overlapping with “How to think like a Computer Scientist”\nThinkPython: please note that despite providing a good introduction to Python, the language and examples used in this book are not the most inclusive. Most of the examples are drawn from the comedy routines of the British surrealist comedians “Monty Python (Links to an external site.)” which, to someone who has never seen any of their material, will not be particularly helpful.\nCourse notes: together with other members of the CS Department, we are putting together our own interactive notes for the intro courses. This is still a work in progress and they are constantly edited so, go back often to check since there might be new goodies appearing over time.\nPython 3.7 Documentation: This is the official documentation for the Python programming language. Following along with the Tutorial is an excellent way to develop your skills, and the Language Reference is also extremely helpful. Note that this is the documentation for Python 3.7, rather than the most current Python 3.10. This is because Python 3.7 is the version that comes bundled with Thonny, and is therefore the version we will use in this class. The differences between 3.7 and 3.10 are minimal and unlikely to ever come up in CSCI 0145.\n© Philip Claude Caplan, Andrea Vaccari, and Phil Chodrow, 2022"
  },
  {
    "objectID": "tools.html#python-thonny",
    "href": "tools.html#python-thonny",
    "title": "Course Resources",
    "section": "Python: Thonny",
    "text": "Python: Thonny\nWe’ll write most of our Python code in Thonny. Thonny is a simple integrated development environment (IDE): a place to write, run, and troubleshoot code. It can be installed on Windows, Mac and Linux. Please see the Thonny website for installation instructions. Thonny comes bundled with Python version 3.7, which is the version that we will use throughout CSCI 0145.\n\n\n\n\n\nA screenshot of the Thonny Python IDE, showing some sample code and some pop-out windows for debugging.\n\n\nThe Thonny IDE.\nYou may already be familiar with a different IDE, and may prefer it to Thonny. While you are welcome to use your IDE of choice on your own time, we expect you to use Thonny during class time and when working with partners on labs. This is to ensure that we don’t have to spend precious group time with one partner getting used to another partner’s IDE."
  },
  {
    "objectID": "tools.html#collaborative-python-replit",
    "href": "tools.html#collaborative-python-replit",
    "title": "Course Resources",
    "section": "Collaborative Python: replit",
    "text": "Collaborative Python: replit\nWe’ll have regular group assignments that will ask you to collaborate on coding projects. In general, the expectation is that only one person will be coding at a time. However, in order to ensure that you don’t need to do things like swap laptops when it comes time to change roles, we’ll complete these assignments in an online collaborative coding environment called replit. You’ll sign up for our CSCI 0145 team on replit using an invite link posted in Canvas. You’ll then be able to work with partners on guided discovery and lab assignments in the replit interface. It’s a bit more complex than Thonny, but has the same core functionality.\n\n\n\n\n\nA screenshot of replit, showing a file browser, source code, and output in a terminal.\n\n\nThe replit online IDE."
  },
  {
    "objectID": "tools.html#help-forum-campuswire",
    "href": "tools.html#help-forum-campuswire",
    "title": "Course Resources",
    "section": "Help Forum: Campuswire",
    "text": "Help Forum: Campuswire\nWe will use Campuswire as a question-and-answer forum related to course content. You’ll join Campuswire by clicking on a link provided on Canvas. A few basic policies:\n\n\n\n\n\nA screenshot of Campuswire, showing a menu sidebar, a list of recent posts, and a question/answer exchange involving a mathematical formula.\n\n\nCampuswire, our Q&A forum.\n\nQuestions should usually be posted publicly. I reserve the right to make private questions public.\nPlease ask questions using your name (i.e. not anonymously). Use of names helps us establish a healthy and respectful learning community.\nBefore posting your question, please follow the steps outlined in Asking for Help.\nConceptual questions are always fine.\nCode that is directly related to lab or homework solutions should never be posted on Campuswire.\nIf you are having trouble with code in a lab or homework assignment, you should create a minimal reproducible example of your issue. A minimal reproducible example is sometimes called a reprex.\n\nCampuswire isn’t here just for me to help you – it’s also for you to help each other. Both excellent, thoughtful questions and"
  },
  {
    "objectID": "tools.html#assignments-gradescope-and-canvas",
    "href": "tools.html#assignments-gradescope-and-canvas",
    "title": "Course Resources",
    "section": "Assignments: Gradescope and Canvas",
    "text": "Assignments: Gradescope and Canvas\nGradescope is one of the places in which you’ll submit graded assignments for this course. Most assignments, including homework assignments, labs, and guided discovery activities will be submitted to Gradescope. Homework assignments and labs will be assessed for correctness, while guided discovery activities will simply be assessed for completion.\n\n\n\n\n\nA screenshot of Gradescope, showing a coding submission and a grading rubric with some items marked.\n\n\nGradescope, our primary tool for submitting graded work.\nWe’ll also submit some assignments through Canvas. Canvas is also where we’ll keep things like lecture recordings, grades, and other non-public content."
  },
  {
    "objectID": "acknowledgements.html",
    "href": "acknowledgements.html",
    "title": "Acknowledgements",
    "section": "",
    "text": "© Philip Claude Caplan, Andrea Vaccari, and Phil Chodrow, 2022"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Welcome!",
    "section": "",
    "text": "CSCI 0145, “Introduction to Computing,” is an introductory course in computer science at Middlebury College. It is one of several ways in which you might begin a computer science major at Midd. It’s also a great way for you to develop your computational skills to support other majors.\nThe primary aim of CSCI 0145 is to help you build strong foundations in computational thinking and programming skills. We will cover a fair amount of the Python programming language. That said, our primary focus will be on reasoning, program design, and implementation principles rather than the details of Python programming.\n© Philip Claude Caplan, Andrea Vaccari, and Phil Chodrow, 2022"
  },
  {
    "objectID": "index.html#instructor",
    "href": "index.html#instructor",
    "title": "Welcome!",
    "section": "Instructor",
    "text": "Instructor\n\nHello! I’m Dr. Phil Chodrow, and I’ll be your instructor for this course. My pronouns are he/him/his.\nMy research focuses on network science, the study of connected systems in society and nature. I draw on methods from applied mathematics, machine learning, statistics, and physics. I also work on data science projects to promote equity and sustainability.\nI love ethical data science, effective teaching, Star Trek: Deep Space 9, cool math, cooking, tea, traditional martial arts, and Studio Ghibli movies."
  },
  {
    "objectID": "collaboration.html",
    "href": "collaboration.html",
    "title": "Collaboration And Academic Honesty",
    "section": "",
    "text": "This is a page of general principles and guidelines that apply in courses I (Phil Chodrow) teach at Middlebury College. It is lightly adapted from the handout “Collaborating on Mathematics” by the Harvey Mudd Department of Mathematics, which I discovered in a Tweet by Francis Su.\nIn any case in which the guidelines and principles on this page conflict with the policies of a specific course, the policies of the specific course should be followed. For example, if the course syllabus says that collaboration is not permitted on homeworks, then collaboration is not permitted on homeworks, regardless of anything written here.\n© Philip Claude Caplan, Andrea Vaccari, and Phil Chodrow, 2022"
  },
  {
    "objectID": "collaboration.html#why-collaborate",
    "href": "collaboration.html#why-collaborate",
    "title": "Collaboration And Academic Honesty",
    "section": "Why Collaborate?",
    "text": "Why Collaborate?\nMost scientists and engineers don’t work on their own; they work with colleagues and students while doing and publishing research. Increasingly, open problems in science and engineering require multiple skill sets and areas of expertise. Because of this, the need to collaborate will only increase in the future. This is why several of CS@Midd’s learning goals are explicitly focused on communication and collaboration. We want our students to have strong professional and communication skills, to be able to function well as part of a team, and to be able to work and communicate with diverse groups of people."
  },
  {
    "objectID": "collaboration.html#collaborating-on-homework-and-other-individually-assessed-assignments",
    "href": "collaboration.html#collaborating-on-homework-and-other-individually-assessed-assignments",
    "title": "Collaboration And Academic Honesty",
    "section": "Collaborating on Homework and Other Individually-Assessed Assignments",
    "text": "Collaborating on Homework and Other Individually-Assessed Assignments\n\n(COLLABORATION IS A LIFE SKILL) Understand that working with others and asking for assistance are not signs of weakness or deficiency; rather, they are essential life skills important for making progress in any discipline, including computer science. Our department wants you to develop these skills. If you’re too shy to come to my office hours or to join a group of people working on their homework, ask a friend to come with you.\n(COLLABORATIONS BENEFIT FROM DIVERSITY) Open yourself up to working with people whom you don’t know (yet). You might find someone you work really well with and who doesn’t think exactly like you do. A wide range of experiecnes and backgrounds is beneficial in problem solving, although it may be helpful to find folks who can work on assignments during the same time of day and at roughly the same pace. If you’re having trouble finding people to work with, I can help!\n(COLLABORATIONS ARE INCLUSIVE) Believe that everyone has something meaningful to contribute (you included), and that you have something to learn from each person. This can be a difficult state of mind to achieve, but critical for healthy, effective collaboration. Here are some practical consequences:\n\nIn any group setting, listen carefully for everyone’s contributions. Don’t dismiss or ignore what someone says, and don’t move on until you’ve considered it carefully. If what is said doesn’t make sense to you, that doesn’t necessarily mean it’s incorrect–the person might just have a way of approaching the problem that is different and not yet clear to you. Furthermore, even ideas that ultimately turn out to be incomplete or incorrect are often still useful building blocks towards a successful approach.\nFind ways to verbally validate the ideas of others. For example: “One really neat feature of Zenith’s approach to part (b) is that it also works with a small modification for part (c).”\nIf someone in the group hasn’t spoken for a while, ask for their ideas or opinions. Conversely, if you find yourself talking a lot, take a step back and allow someone else to contribute to the discussion.\n\n(COLLABORATIONS REQUIRE PREPARATION) Don’t seek help from others on a probem before you’ve had time to think about it yourself, try at least one approach, and formulate the obstacle as clearly as you can. But at the same time, if you find yourself frustrated with a problem and you’re not making progress, don’t wait too long before you look for help from your classmates, your tutors, or me.\n(COLLABORATIONS GENERATE DEEPER UNDERSTANDING) Don’t be satisfied with only producing the correct final result; use your collaboration to push each other to understand:\n\nWhy does this approach work?\nWhat alternative approaches would also have worked?\nWhat are some of the merits and drawbacks of these different approaches?\n\n(COLLABORATIONS ARE EMPOWERING) Good collaborations empower people towards further growth.\n\nWhen you’re working on a problem with others and you find a path before everyone else, avoid ruining the experience of discovery for others. Conversely, if you haven’t figured out something yet and want to enjoy the discovery for yourself, don’t let someone else ruin your joy.\nIf someone asks you for help, don’t just tell them the answer or start showing them a solution method. Listen carefully to their question. Ask for more information if they aren’t being specific enough. If they say “I don’t know where to start,” ask them to tell you about their understanding of what the question is asking and which parts of it seem most puzzling. Ask guiding questions to help them discover ideas for themselves. In these situations, you have the opportunity to learn how to help others learn – this is an invaluable life skill.\n\n(COLLABORATIONS ACKNOWLEDGE CONTRIBUTORS) Whenever you’ve received help on a homework assignment from a classmate, a friend, a tutor, or me, acknowledge the support and briefly describe how it helped you in your assignment.\n\nThe reason I ask you to acknowledge tutors and myself is actually different from the reason I ask you to acknowledge classmates and friends. For classmates and friends, it’s about cultivating transparency and integrity. The primary reason I want you to acknowledge tutors and myself is that the exercise of explicitly remembering and reflecting on your learning journey is part of metacognition, a valuable set of practices that will help you succeed in this class, in college, and in your long-term career."
  },
  {
    "objectID": "collaboration.html#collaborating-on-group-projects",
    "href": "collaboration.html#collaborating-on-group-projects",
    "title": "Collaboration And Academic Honesty",
    "section": "Collaborating on Group Projects",
    "text": "Collaborating on Group Projects\n\n(COLLABORATIONS SET GOOD EXPECTATIONS) Establish clear expectations and ways of communicating with each other to avoid misunderstandings. When, where, and how often will you meet? How can you reach each other in case of an emergency?\n(COLLABORATION IS NOT DIVISION OF LABOR) Collaboration is not the same as splitting up a problem into pieces and then slapping the completed pieces together.\n\nIdentify the parts of the problem that need to be completed together and the parts that can be completed individually.\nWork toward a final product that everyone is happy with and that represents the contributions of everyone on the group.\nDon’t just divide up the work based on who might have the most experience or skill with each part of the problem. Let those who want to develop their skills also have a chance to work on pieces that are unfamiliar to them\n\n(COLLABORATIONS ARE EQUITABLE) Aim for each person to contribute a fair and equitable amount of effort and/or time to the group’s deliverables.\n(COLLABORATIONS RESOLVE CONFLICT QUICKLY) Resolve any misunderstands between the team members quickly. Don’t let those misunderstandings fester into distrust, resentment, or anger. Don’t be afraid to ask your professor for help in resolving interpersonal conflict in your team. While this can feel uncomfortable, often these kinds of situations are important opportunities for everyone to learn more about how to coexist as collaborative, whole humans."
  },
  {
    "objectID": "collaboration.html#collaboration-is-a-skill",
    "href": "collaboration.html#collaboration-is-a-skill",
    "title": "Collaboration And Academic Honesty",
    "section": "Collaboration is a Skill",
    "text": "Collaboration is a Skill\nYou might imagine that you already know whether you need to collaborate and how to do it. And indeed, there’s a lot you know already! But collaboration is a skill, and like other skills it rewards practice and growth. Effective collaboration involves perspective-taking, empathy, respect, and clear communication. We hope that you will find that the benefits of collaboration far outweigh its challenges."
  },
  {
    "objectID": "collaboration.html#collaboration-and-the-middlebury-honor-code",
    "href": "collaboration.html#collaboration-and-the-middlebury-honor-code",
    "title": "Collaboration And Academic Honesty",
    "section": "Collaboration and the Middlebury Honor Code",
    "text": "Collaboration and the Middlebury Honor Code\nThe Middlebury Honor Code’s preamble states that:\n\nThe students of Middlebury College believe that individual undergraduates must assume responsibility for their own integrity on all assigned academic work…The Middlebury student body, then, declares its commitment to an honor system that fosters moral growth and to a code that will not tolerate academic dishonesty in the College community.\n\nIn any assignment in which you receive a grade individually (homeworks, exams), the purpose of the grade is to measure your learning and achievement. When you turn in such an assignment, you implicitly represent that work as work that you are able to complete yourself under the stated conditions (which may include getting help or working with others). If you cannot complete some work under the stated collaboration conditions, it is dishonest to turn in that work.\nWhen working individually, it is your responsibility to uphold the Code’s standards of integrity and academic honesty. When working in a group, it is additionally your responsibility to ensure that your group as a whole upholds these standards.\nIf you have a question about whether some form of collaboration is permitted, just ask!\n\nWhat Happens if I Observe an Honor Violation?\n\nWe all fail to uphold our highest moral aspirations at times. If you show lack of integrity or academic honesty, that doesn’t mean you’re a bad person. It means that you’re under pressure and chose the course of action that looked like the most workable one to you at the time.\nThat said, if you show lack of integrity or academic honesty, that’s an indicator that you have an opportunity for some very important growth.\nIt is part of my job to help you achieve that growth. I take this part of my job very seriously. In order to help you on your journey, I will connect both of us with the Middlebury Community Standards Office. Office leadership will help us all find a path that helps you grow toward integrity and honesty.\nThis is an awkward and uncomfortable process for everyone involved. You don’t want this."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "© Philip Claude Caplan, Andrea Vaccari, and Phil Chodrow, 2022"
  },
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "Syllabus",
    "section": "",
    "text": "CSCI 0145, Introduction to Computing, is an introductory course in computer science at Middlebury College. It is one of several ways in which you might begin a computer science major at Midd. It’s also a great way for you to develop your computational skills to support other majors.\n© Philip Claude Caplan, Andrea Vaccari, and Phil Chodrow, 2022"
  },
  {
    "objectID": "syllabus.html#covid-19-considerations",
    "href": "syllabus.html#covid-19-considerations",
    "title": "Syllabus",
    "section": "COVID-19 Considerations",
    "text": "COVID-19 Considerations\n\nMasks Are Expected in CSCI 0145\nThe Computer Science Department policy states that:\n\nWe in the Computer Science department value a safe learning and working environment for all. While we can’t eliminate the risks associated with COVID-19, evidence suggests that widespread masking can significantly reduce the transmission and severity of disease. In order to protect the health of our community, the CS department recommends that students and faculty wear masks in CS learning spaces, including classrooms, office hours, and public areas. We acknowledge the College policy gives instructors the final say over classroom masking requirements, and expect all students to respect instructors’ stated policies in each course.\n\nIn alignment with this policy, I expect you to wear masks in class and office hours. I encourage you to wear masks during help sessions and at all other times when you are inside 75 Shannon Street.\nIf you arrive in class without a mask, I will offer you one. I will expect you to either wear it or excuse yourself from class that day.\n\n\nMissing Class\nUnfortunately, we are still in a pandemic. My assumption is that there will be positive COVID tests on campus, and that some of them may occur in our class. If you are feeling ill or test positive for COVID:\n\nDo not attend class in person. Isolate per College policies. We have relatively detailed lecture notes and other resources that will help you catch up with lecture content.\nWhen you are feeling up to it, contact me about how to make up work for the course."
  },
  {
    "objectID": "syllabus.html#help-on-lab-assignments",
    "href": "syllabus.html#help-on-lab-assignments",
    "title": "Syllabus",
    "section": "Help on Lab Assignments",
    "text": "Help on Lab Assignments\nLab assignments are completed with a partner. You’re very welcome to get help on your lab assignment by attending Peer Help sessions and Student Hours with your partner. If there’s not a Peer Help or Student Hours session in which you and your partner can both attend, you’re welcome to email me about finding other ways to get help."
  },
  {
    "objectID": "syllabus.html#general-advice",
    "href": "syllabus.html#general-advice",
    "title": "Syllabus",
    "section": "General Advice",
    "text": "General Advice\nI am always happy to talk with you about your future plans, including internships, research opportunities, and graduate school applications. Because I am a creature of the academy, I am less knowledgeable about industry jobs, although you are welcome to ask about those too. You can drop in during Student Hours or email me to make an appointment."
  },
  {
    "objectID": "syllabus.html#letters-of-recommendation",
    "href": "syllabus.html#letters-of-recommendation",
    "title": "Syllabus",
    "section": "Letters of Recommendation",
    "text": "Letters of Recommendation\nWriting letters of recommendation for students is a fundamental part of my job and something that I am usually very happy to do. Here’s how to ask me for a letter."
  },
  {
    "objectID": "help.html",
    "href": "help.html",
    "title": "Asking for Help",
    "section": "",
    "text": "Asking for help is a fundamental part of how you will learn in CSCI 0145. Do it often. Here is some wisdom on this topic from the Best Cat On the Internet:\n© Philip Claude Caplan, Andrea Vaccari, and Phil Chodrow, 2022"
  },
  {
    "objectID": "help.html#if-youre-really-stuck",
    "href": "help.html#if-youre-really-stuck",
    "title": "Asking for Help",
    "section": "If You’re Really Stuck",
    "text": "If You’re Really Stuck\nMaybe you’re working on an assignment, you’re stuck, and you don’t have time to get help before you turn it in. This isn’t a great scenario, but it happens to all of us every now and then. If you find yourself in this situation, please include some comments in your assignment describing where you got stuck, what you tried, and what you would have done if you had more time. We’ll take your comments into consideration when assessing your work."
  },
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "Course Schedule",
    "section": "",
    "text": "Week 1 \n            \n        \n            \n                    M\n                    \n                    Sep. 12 \n             Welcome to CSCI 0145!\n   \n        \n        \n             \n                We discuss the structure of the class and briefly introduce computational thinking. \n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Computational Thinking  \n            \n            \n                    Reading\n                            Course syllabus  \n                            Collaboration and academic honesty  \n                            Course resources  \n                            Asking for help  \n                            Algorithms and bugs  \n            \n            \n            \n            \n            \n        \n        \n            \n                    W\n                    \n                    Sep. 14 \n             Expressions and Variables\n   \n        \n        \n             \n                We discuss expressions -- the simplest recipes for computations -- and variables, which allow us to store the results of computations for later use. \n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Computational Thinking  \n                            Python Programming  \n            \n            \n                    Reading\n                            Expressions  \n                            Variables  \n            \n            \n            \n            \n            \n        \n        \n            \n                    T\n                    \n                    Sep. 15 \n             Guided Discovery: Introduction to Strings\n   \n        \n        \n             \n                We learn some ways to manipulate text, save the results, and show them to the user. We'll come back to advanced text manipulation much later in the course. \n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Python Programming  \n                            Applications  \n            \n            \n                    Activity\n                            GD1  \n            \n            \n            \n            \n            \n        \n        \n            \n                    F\n                    \n                    Sep. 16 \n             Functions\n   \n        \n        \n             \n                Functions are reusable computational recipes. We discuss the basic ingredients of a function and work through some simple examples. \n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Computational Thinking  \n                            Python Programming  \n            \n            \n                    Reading\n                             Functions (1-3)  \n                             ThinkPython 3.1-3.7  \n            \n            \n            \n            \n            \n        \n            \n             Week 2 \n            \n        \n            \n                    M\n                    \n                    Sep. 19 \n             More on Functions\n   \n        \n        \n             \n                We discuss some important considerations for writing functions and using functions that other people have written. Our main topics are variable scope, documentation, and modules. \n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Computational Thinking  \n                            Python Programming  \n            \n            \n                    Reading\n                             Functions (4-5)  \n                             ThinkPython 3.8-3.14  \n            \n            \n                    Assigned\n                        HW1 \n            \n            \n            \n        \n        \n            \n                    W\n                    \n                    Sep. 21 \n             Control Flow\n   \n        \n        \n             \n                We discuss how to make decisions when executing a program. \n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Computational Thinking  \n                            Python Programming  \n            \n            \n                    Reading\n                            Conditionals  \n                            How Pair Programming Really Works by Stuart Wray  \n                             Think Like a Computer Scientist, Chapter 7   \n            \n            \n            \n            \n            \n        \n        \n            \n                    T\n                    \n                    Sep. 22 \n             Guided Discovery: Practice With Functions and Control Flow\n   \n        \n        \n             \n                We practice writing functions that make simple decisions in response to user input. \n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Computational Thinking  \n                            Python Programming  \n                            Social Responsibility  \n            \n            \n                    Activity\n                            GD2  \n            \n            \n            \n            \n            \n        \n        \n            \n                    F\n                    \n                    Sep. 23 \n             Lab: Developers as Decision-Makers\n   \n        \n        \n             \n                We use our skills with gathering user input, writing functions, and making simple decisions that prioritize some users over others. We also practice the human-centered design process. \n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Python Programming  \n                            Design and Collaboration  \n                            Social Responsibility  \n            \n            \n                    Activity\n                            Lab 1  \n            \n            \n                    Assigned\n                        Lab 1 \n            \n            \n            \n        \n            \n             Week 3 \n            \n        \n            \n                    M\n                    \n                    Sep. 26 \n             Recursion\n   \n        \n        \n             \n                We study recursion, a powerful tool for writing simple solutions to complex problems by breaking them down into smaller problems. \n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Computational Thinking  \n            \n            \n                    Reading\n                            Recursion  \n                             ThinkPython 5.8-5.14  \n            \n            \n                    Assigned\n                        HW2 \n            \n            \n                    Due\n                            HW1 \n            \n        \n        \n            \n                    W\n                    \n                    Sep. 28 \n             Recursion and Recursive Graphics\n   \n        \n        \n             \n                We continue our study of recursion while creating simple recursive graphics. \n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Computational Thinking  \n            \n            \n                    Reading\n                            Turtle Graphics  \n            \n            \n            \n            \n                    Due\n                            Lab 1 \n            \n        \n        \n            \n                    T\n                    \n                    Sep. 29 \n             Guided Discovery: Recursion and Performance\n   \n        \n        \n             \n                We learn some ways to measure and analyze the performance of functions, and use these techniques to study the performance implications of recursive techniques. \n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Computational Thinking  \n                            Python Programming  \n            \n            \n                    Activity\n                            GD3  \n            \n            \n            \n            \n            \n        \n        \n            \n                    F\n                    \n                    Sep. 30 \n             Lab: Fractal Graphics with Recursion\n   \n        \n        \n             \n                We practice writing functions to produce recursive graphics with the turtle module. \n            \n        \n        \n            \n            \n                    Learning Objectives\n                            Computational Thinking  \n                            Python Programming  \n            \n            \n                    Activity\n                            Lab 2  \n            \n            \n                    Assigned\n                        Lab 2 \n            \n            \n            \n        \n        \n\nNo matching items\n\n  © Philip Claude Caplan, Andrea Vaccari, and Phil Chodrow, 2022"
  }
]